
AVRASM ver. 2.1.30  E:\Projects\AVR Projects\BMP280_MQ9_on_USART\Debug\List\MAIN.asm Mon Aug 28 11:37:43 2023

E:\Projects\AVR Projects\BMP280_MQ9_on_USART\Debug\List\MAIN.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\Projects\AVR Projects\BMP280_MQ9_on_USART\Debug\List\MAIN.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\Projects\AVR Projects\BMP280_MQ9_on_USART\Debug\List\MAIN.asm(1090): warning: Register r7 already defined by the .DEF directive
E:\Projects\AVR Projects\BMP280_MQ9_on_USART\Debug\List\MAIN.asm(1091): warning: Register r6 already defined by the .DEF directive
E:\Projects\AVR Projects\BMP280_MQ9_on_USART\Debug\List\MAIN.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _MQ9=R4
                 	.DEF _MQ9_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0050 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 6f43
00002b 6e6e
00002c 6365
00002d 6974      	.DB  0x43,0x6F,0x6E,0x6E,0x65,0x63,0x74,0x69
00002e 6e6f
00002f 6520
000030 7272
000031 726f      	.DB  0x6F,0x6E,0x20,0x65,0x72,0x72,0x6F,0x72
000032 0021
000033 3025
000034 7532
000035 252e      	.DB  0x21,0x0,0x25,0x30,0x32,0x75,0x2E,0x25
000036 3230
000037 2c75
000038 3025
000039 7534      	.DB  0x30,0x32,0x75,0x2C,0x25,0x30,0x34,0x75
00003a 252e
00003b 3230
00003c 2c75
00003d 6425      	.DB  0x2E,0x25,0x30,0x32,0x75,0x2C,0x25,0x64
E:\Projects\AVR Projects\BMP280_MQ9_on_USART\Debug\List\MAIN.asm(1129): warning: .cseg .db misalignment - padding zero byte
00003e 0000      	.DB  0x0
                 _0x2000000:
00003f 4e2d
000040 4e41
E:\Projects\AVR Projects\BMP280_MQ9_on_USART\Debug\List\MAIN.asm(1131): warning: .cseg .db misalignment - padding zero byte
000041 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2020060:
E:\Projects\AVR Projects\BMP280_MQ9_on_USART\Debug\List\MAIN.asm(1133): warning: .cseg .db misalignment - padding zero byte
000042 0001      	.DB  0x1
                 _0x2020000:
000043 4e2d
000044 4e41
000045 4900
000046 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\Projects\AVR Projects\BMP280_MQ9_on_USART\Debug\List\MAIN.asm(1136): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x0
                 _0x2040003:
000048 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000049 0001      	.DW  0x01
00004a 02a0      	.DW  __seed_G101
00004b 0084      	.DW  _0x2020060*2
                 
00004c 0002      	.DW  0x02
00004d 02a4      	.DW  __base_y_G102
00004e 0090      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
00004f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000050 94f8      	CLI
000051 27ee      	CLR  R30
000052 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000053 e0f1      	LDI  R31,1
000054 bffb      	OUT  GICR,R31
000055 bfeb      	OUT  GICR,R30
000056 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000057 e08d      	LDI  R24,(14-2)+1
000058 e0a2      	LDI  R26,2
000059 27bb      	CLR  R27
                 __CLEAR_REG:
00005a 93ed      	ST   X+,R30
00005b 958a      	DEC  R24
00005c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005e e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000060 93ed      	ST   X+,R30
000061 9701      	SBIW R24,1
000062 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000063 e9e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000064 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000065 9185      	LPM  R24,Z+
000066 9195      	LPM  R25,Z+
000067 9700      	SBIW R24,0
000068 f061      	BREQ __GLOBAL_INI_END
000069 91a5      	LPM  R26,Z+
00006a 91b5      	LPM  R27,Z+
00006b 9005      	LPM  R0,Z+
00006c 9015      	LPM  R1,Z+
00006d 01bf      	MOVW R22,R30
00006e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006f 9005      	LPM  R0,Z+
000070 920d      	ST   X+,R0
000071 9701      	SBIW R24,1
000072 f7e1      	BRNE __GLOBAL_INI_LOOP
000073 01fb      	MOVW R30,R22
000074 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000075 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000076 bfed      	OUT  SPL,R30
000077 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000078 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000079 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007a e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007b 940c 0368 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8/000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;// I2C Bus functions
                 ;#include <i2c.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;#define BMP280_I2C_ADDRESS  0xEC
                 ;#include <BMP280_Lib.c>
                 ;#include <stdint.h>
                 ;
                 ;#ifndef BMP280_I2C_ADDRESS
                 ;  #define BMP280_I2C_ADDRESS  0xEE
                 ;#endif
                 ;
                 ;#define BMP280_CHIP_ID        0x58
                 ;
                 ;#define BMP280_REG_DIG_T1     0x88
                 ;#define BMP280_REG_DIG_T2     0x8A
                 ;#define BMP280_REG_DIG_T3     0x8C
                 ;
                 ;#define BMP280_REG_DIG_P1     0x8E
                 ;#define BMP280_REG_DIG_P2     0x90
                 ;#define BMP280_REG_DIG_P3     0x92
                 ;#define BMP280_REG_DIG_P4     0x94
                 ;#define BMP280_REG_DIG_P5     0x96
                 ;#define BMP280_REG_DIG_P6     0x98
                 ;#define BMP280_REG_DIG_P7     0x9A
                 ;#define BMP280_REG_DIG_P8     0x9C
                 ;#define BMP280_REG_DIG_P9     0x9E
                 ;
                 ;#define BMP280_REG_CHIPID     0xD0
                 ;#define BMP280_REG_SOFTRESET  0xE0
                 ;
                 ;#define BMP280_REG_STATUS     0xF3
                 ;#define BMP280_REG_CONTROL    0xF4
                 ;#define BMP280_REG_CONFIG     0xF5
                 ;#define BMP280_REG_PRESS_MSB  0xF7
                 ;
                 ;int32_t adc_T, adc_P, t_fine;
                 ;
                 ;// BMP280 sensor modes, register ctrl_meas mode[1:0]
                 ;enum BMP280_mode
                 ;{
                 ;  MODE_SLEEP  = 0x00,  // sleep mode
                 ;  MODE_FORCED = 0x01,  // forced mode
                 ;  MODE_NORMAL = 0x03   // normal mode
                 ;} ;
                 ;
                 ;// oversampling setting. osrs_t[2:0], osrs_p[2:0]
                 ;enum BMP280_sampling
                 ;{
                 ;  SAMPLING_SKIPPED = 0x00,  //skipped, output set to 0x80000
                 ;  SAMPLING_X1      = 0x01,  // oversampling x1
                 ;  SAMPLING_X2      = 0x02,  // oversampling x2
                 ;  SAMPLING_X4      = 0x03,  // oversampling x4
                 ;  SAMPLING_X8      = 0x04,  // oversampling x8
                 ;  SAMPLING_X16     = 0x05   // oversampling x16
                 ;} ;
                 ;
                 ;// filter setting filter[2:0]
                 ;enum BMP280_filter
                 ;{
                 ;  FILTER_OFF = 0x00,  // filter off
                 ;  FILTER_2   = 0x01,  // filter coefficient = 2
                 ;  FILTER_4   = 0x02,  // filter coefficient = 4
                 ;  FILTER_8   = 0x03,  // filter coefficient = 8
                 ;  FILTER_16  = 0x04   // filter coefficient = 16
                 ;} ;
                 ;
                 ;// standby (inactive) time in ms (used in normal mode), t_sb[2:0]
                 ;enum standby_time
                 ;{
                 ;  STANDBY_0_5   =  0x00,  // standby time = 0.5 ms
                 ;  STANDBY_62_5  =  0x01,  // standby time = 62.5 ms
                 ;  STANDBY_125   =  0x02,  // standby time = 125 ms
                 ;  STANDBY_250   =  0x03,  // standby time = 250 ms
                 ;  STANDBY_500   =  0x04,  // standby time = 500 ms
                 ;  STANDBY_1000  =  0x05,  // standby time = 1000 ms
                 ;  STANDBY_2000  =  0x06,  // standby time = 2000 ms
                 ;  STANDBY_4000  =  0x07   // standby time = 4000 ms
                 ;} ;
                 ;
                 ;struct
                 ;{
                 ;  uint16_t dig_T1;
                 ;  int16_t  dig_T2;
                 ;  int16_t  dig_T3;
                 ;
                 ;  uint16_t dig_P1;
                 ;  int16_t  dig_P2;
                 ;  int16_t  dig_P3;
                 ;  int16_t  dig_P4;
                 ;  int16_t  dig_P5;
                 ;  int16_t  dig_P6;
                 ;  int16_t  dig_P7;
                 ;  int16_t  dig_P8;
                 ;  int16_t  dig_P9;
                 ;} BMP280_calib;
                 ;
                 ;// writes 1 byte '_data' to register 'reg_addr'
                 ;void BMP280_Write(uint8_t reg_addr, uint8_t _data)
                 ; 0000 0016 {
                 
                 	.CSEG
                 _BMP280_Write:
                 ; .FSTART _BMP280_Write
                 ;  i2c_start();
00007d 93aa      	ST   -Y,R26
                 ;	reg_addr -> Y+1
                 ;	_data -> Y+0
00007e 940e 0913 	CALL SUBOPT_0x0
                 ;  i2c_write(BMP280_I2C_ADDRESS);
                 ;  i2c_write(reg_addr);
                 ;  i2c_write(_data);
000080 81a8      	LD   R26,Y
000081 940e 0b0c 	CALL _i2c_write
                 ;  i2c_stop();
000083 940e 0ae7 	CALL _i2c_stop
                 ;}
000085 c00e      	RJMP _0x20C000B
                 ; .FEND
                 ;
                 ;// reads 8 bits from register 'reg_addr'
                 ;uint8_t BMP280_Read8(uint8_t reg_addr)
                 ;{
                 _BMP280_Read8:
                 ; .FSTART _BMP280_Read8
                 ;  uint8_t ret;
                 ;
                 ;  i2c_start();
000086 93aa      	ST   -Y,R26
000087 931a      	ST   -Y,R17
                 ;	reg_addr -> Y+1
                 ;	ret -> R17
000088 940e 0913 	CALL SUBOPT_0x0
                 ;  i2c_write(BMP280_I2C_ADDRESS);
                 ;  i2c_write(reg_addr);
                 ;  i2c_start();
00008a 940e 091b 	CALL SUBOPT_0x1
                 ;  i2c_write(BMP280_I2C_ADDRESS | 1);
                 ;  ret = i2c_read(0);
00008c e0a0      	LDI  R26,LOW(0)
00008d 940e 0af1 	CALL _i2c_read
00008f 2f1e      	MOV  R17,R30
                 ;  i2c_stop();
000090 940e 0ae7 	CALL _i2c_stop
                 ;
                 ;  return ret;
000092 2fe1      	MOV  R30,R17
000093 8118      	LDD  R17,Y+0
                 _0x20C000B:
000094 9622      	ADIW R28,2
000095 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;// reads 16 bits from register 'reg_addr'
                 ;uint16_t BMP280_Read16(uint8_t reg_addr)
                 ;{
                 _BMP280_Read16:
                 ; .FSTART _BMP280_Read16
                 ;  union
                 ;  {
                 ;    uint8_t  b[2];
                 ;    uint16_t w;
                 ;  } ret;
                 ;
                 ;  i2c_start();
000096 93aa      	ST   -Y,R26
000097 9722      	SBIW R28,2
                 ;	reg_addr -> Y+2
                 ;	ret -> Y+0
000098 940e 0ad8 	CALL _i2c_start
                 ;  i2c_write(BMP280_I2C_ADDRESS);
00009a eeac      	LDI  R26,LOW(236)
00009b 940e 0b0c 	CALL _i2c_write
                 ;  i2c_write(reg_addr);
00009d 81aa      	LDD  R26,Y+2
00009e 940e 0b0c 	CALL _i2c_write
                 ;  i2c_start();
0000a0 940e 091b 	CALL SUBOPT_0x1
                 ;  i2c_write(BMP280_I2C_ADDRESS | 1);
                 ;  ret.b[0] = i2c_read(1);
0000a2 e0a1      	LDI  R26,LOW(1)
0000a3 940e 0af1 	CALL _i2c_read
0000a5 83e8      	ST   Y,R30
                 ;  ret.b[1] = i2c_read(0);
0000a6 e0a0      	LDI  R26,LOW(0)
0000a7 940e 0af1 	CALL _i2c_read
0000a9 83e9      	STD  Y+1,R30
                 ;  i2c_stop();
0000aa 940e 0ae7 	CALL _i2c_stop
                 ;
                 ;  return(ret.w);
0000ac 81e8      	LD   R30,Y
0000ad 81f9      	LDD  R31,Y+1
0000ae 940c 041c 	JMP  _0x20C0008
                 ;}
                 ; .FEND
                 ;
                 ;// BMP280 sensor configuration function
                 ;void BMP280_Configure()
                 ;{
                 _BMP280_Configure:
                 ; .FSTART _BMP280_Configure
                 ;  uint8_t  _ctrl_meas, _config;
                 ;
                 ;  _config = ((0x00 << 5) | (0x00 << 2)) & 0xFC;
0000b0 931a      	ST   -Y,R17
0000b1 930a      	ST   -Y,R16
                 ;	_ctrl_meas -> R17
                 ;	_config -> R16
0000b2 e000      	LDI  R16,LOW(0)
                 ;  _ctrl_meas = (0x01 << 5) | (0x01 << 2) | 0x03;
0000b3 e217      	LDI  R17,LOW(39)
                 ;
                 ;  BMP280_Write(BMP280_REG_CONFIG,  _config);
0000b4 efe5      	LDI  R30,LOW(245)
0000b5 93ea      	ST   -Y,R30
0000b6 2fa0      	MOV  R26,R16
0000b7 dfc5      	RCALL _BMP280_Write
                 ;  BMP280_Write(BMP280_REG_CONTROL, _ctrl_meas);
0000b8 efe4      	LDI  R30,LOW(244)
0000b9 93ea      	ST   -Y,R30
0000ba 2fa1      	MOV  R26,R17
0000bb dfc1      	RCALL _BMP280_Write
                 ;}
0000bc 9109      	LD   R16,Y+
0000bd 9119      	LD   R17,Y+
0000be 9508      	RET
                 ; .FEND
                 ;
                 ;// initializes the BMP280 sensor, returns 1 if OK and 0 if error
                 ;short BMP280_begin()
                 ;{
                 _BMP280_begin:
                 ; .FSTART _BMP280_begin
                 ;  if(BMP280_Read8(BMP280_REG_CHIPID) != BMP280_CHIP_ID)
0000bf eda0      	LDI  R26,LOW(208)
0000c0 dfc5      	RCALL _BMP280_Read8
0000c1 35e8      	CPI  R30,LOW(0x58)
0000c2 f019      	BREQ _0x3
                 ;    return 0;
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 e0f0      	LDI  R31,HIGH(0)
0000c5 9508      	RET
                 ;
                 ;  // reset the BMP280 with soft reset
                 ;  BMP280_Write(BMP280_REG_SOFTRESET, 0xB6);
                 _0x3:
0000c6 eee0      	LDI  R30,LOW(224)
0000c7 93ea      	ST   -Y,R30
0000c8 eba6      	LDI  R26,LOW(182)
0000c9 dfb3      	RCALL _BMP280_Write
                 ;  delay_ms(100);
0000ca e6a4      	LDI  R26,LOW(100)
0000cb e0b0      	LDI  R27,0
0000cc 940e 0b24 	CALL _delay_ms
                 ;
                 ;  // if NVM data are being copied to image registers, wait 100 ms
                 ;  while ( (BMP280_Read8(BMP280_REG_STATUS) & 0x01) == 0x01 )
                 _0x4:
0000ce efa3      	LDI  R26,LOW(243)
0000cf dfb6      	RCALL _BMP280_Read8
0000d0 70e1      	ANDI R30,LOW(0x1)
0000d1 30e1      	CPI  R30,LOW(0x1)
0000d2 f429      	BRNE _0x6
                 ;    delay_ms(100);
0000d3 e6a4      	LDI  R26,LOW(100)
0000d4 e0b0      	LDI  R27,0
0000d5 940e 0b24 	CALL _delay_ms
0000d7 cff6      	RJMP _0x4
                 _0x6:
0000d8 e8a8      	LDI  R26,LOW(136)
0000d9 dfbc      	RCALL _BMP280_Read16
0000da 93e0 026c 	STS  _BMP280_calib,R30
0000dc 93f0 026d 	STS  _BMP280_calib+1,R31
                 ;  BMP280_calib.dig_T2 = BMP280_Read16(BMP280_REG_DIG_T2);
0000de e8aa      	LDI  R26,LOW(138)
0000df dfb6      	RCALL _BMP280_Read16
                +
0000e0 93e0 026e+STS _BMP280_calib + ( 2 ) , R30
0000e2 93f0 026f+STS _BMP280_calib + ( 2 ) + 1 , R31
                 	__PUTW1MN _BMP280_calib,2
                 ;  BMP280_calib.dig_T3 = BMP280_Read16(BMP280_REG_DIG_T3);
0000e4 e8ac      	LDI  R26,LOW(140)
0000e5 dfb0      	RCALL _BMP280_Read16
                +
0000e6 93e0 0270+STS _BMP280_calib + ( 4 ) , R30
0000e8 93f0 0271+STS _BMP280_calib + ( 4 ) + 1 , R31
                 	__PUTW1MN _BMP280_calib,4
                 ;
                 ;  BMP280_calib.dig_P1 = BMP280_Read16(BMP280_REG_DIG_P1);
0000ea e8ae      	LDI  R26,LOW(142)
0000eb dfaa      	RCALL _BMP280_Read16
                +
0000ec 93e0 0272+STS _BMP280_calib + ( 6 ) , R30
0000ee 93f0 0273+STS _BMP280_calib + ( 6 ) + 1 , R31
                 	__PUTW1MN _BMP280_calib,6
                 ;  BMP280_calib.dig_P2 = BMP280_Read16(BMP280_REG_DIG_P2);
0000f0 e9a0      	LDI  R26,LOW(144)
0000f1 dfa4      	RCALL _BMP280_Read16
                +
0000f2 93e0 0274+STS _BMP280_calib + ( 8 ) , R30
0000f4 93f0 0275+STS _BMP280_calib + ( 8 ) + 1 , R31
                 	__PUTW1MN _BMP280_calib,8
                 ;  BMP280_calib.dig_P3 = BMP280_Read16(BMP280_REG_DIG_P3);
0000f6 e9a2      	LDI  R26,LOW(146)
0000f7 df9e      	RCALL _BMP280_Read16
                +
0000f8 93e0 0276+STS _BMP280_calib + ( 10 ) , R30
0000fa 93f0 0277+STS _BMP280_calib + ( 10 ) + 1 , R31
                 	__PUTW1MN _BMP280_calib,10
                 ;  BMP280_calib.dig_P4 = BMP280_Read16(BMP280_REG_DIG_P4);
0000fc e9a4      	LDI  R26,LOW(148)
0000fd df98      	RCALL _BMP280_Read16
                +
0000fe 93e0 0278+STS _BMP280_calib + ( 12 ) , R30
000100 93f0 0279+STS _BMP280_calib + ( 12 ) + 1 , R31
                 	__PUTW1MN _BMP280_calib,12
                 ;  BMP280_calib.dig_P5 = BMP280_Read16(BMP280_REG_DIG_P5);
000102 e9a6      	LDI  R26,LOW(150)
000103 df92      	RCALL _BMP280_Read16
                +
000104 93e0 027a+STS _BMP280_calib + ( 14 ) , R30
000106 93f0 027b+STS _BMP280_calib + ( 14 ) + 1 , R31
                 	__PUTW1MN _BMP280_calib,14
                 ;  BMP280_calib.dig_P6 = BMP280_Read16(BMP280_REG_DIG_P6);
000108 e9a8      	LDI  R26,LOW(152)
000109 df8c      	RCALL _BMP280_Read16
                +
00010a 93e0 027c+STS _BMP280_calib + ( 16 ) , R30
00010c 93f0 027d+STS _BMP280_calib + ( 16 ) + 1 , R31
                 	__PUTW1MN _BMP280_calib,16
                 ;  BMP280_calib.dig_P7 = BMP280_Read16(BMP280_REG_DIG_P7);
00010e e9aa      	LDI  R26,LOW(154)
00010f df86      	RCALL _BMP280_Read16
                +
000110 93e0 027e+STS _BMP280_calib + ( 18 ) , R30
000112 93f0 027f+STS _BMP280_calib + ( 18 ) + 1 , R31
                 	__PUTW1MN _BMP280_calib,18
                 ;  BMP280_calib.dig_P8 = BMP280_Read16(BMP280_REG_DIG_P8);
000114 e9ac      	LDI  R26,LOW(156)
000115 df80      	RCALL _BMP280_Read16
                +
000116 93e0 0280+STS _BMP280_calib + ( 20 ) , R30
000118 93f0 0281+STS _BMP280_calib + ( 20 ) + 1 , R31
                 	__PUTW1MN _BMP280_calib,20
                 ;  BMP280_calib.dig_P9 = BMP280_Read16(BMP280_REG_DIG_P9);
00011a e9ae      	LDI  R26,LOW(158)
00011b df7a      	RCALL _BMP280_Read16
                +
00011c 93e0 0282+STS _BMP280_calib + ( 22 ) , R30
00011e 93f0 0283+STS _BMP280_calib + ( 22 ) + 1 , R31
                 	__PUTW1MN _BMP280_calib,22
                 ;
                 ;  BMP280_Configure();
000120 df8f      	RCALL _BMP280_Configure
                 ;
                 ;  return 1;
000121 e0e1      	LDI  R30,LOW(1)
000122 e0f0      	LDI  R31,HIGH(1)
000123 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;// Takes a new measurement, for forced mode only!
                 ;// Returns 1 if ok and 0 if error (sensor is not in sleep mode)
                 ;short BMP280_ForcedMeasurement()
                 ;{
                 ;  uint8_t ctrl_meas_reg = BMP280_Read8(BMP280_REG_CONTROL);
                 ;
                 ;  if ( (ctrl_meas_reg & 0x03) != 0x00 )
                 ;	ctrl_meas_reg -> R17
                 ;    return 0;   // sensor is not in sleep mode
                 ;
                 ;  // set sensor to forced mode
                 ;  BMP280_Write(BMP280_REG_CONTROL, ctrl_meas_reg | 1);
                 ;  // wait for conversion complete
                 ;  while (BMP280_Read8(BMP280_REG_STATUS) & 0x08)
                 ;    delay_ms(1);
                 ;}
                 ;
                 ;// read (updates) adc_P, adc_T and adc_H from BMP280 sensor
                 ;void BMP280_Update()
                 ;{
                 _BMP280_Update:
                 ; .FSTART _BMP280_Update
                 ;  union
                 ;  {
                 ;    uint8_t  b[4];
                 ;    uint32_t dw;
                 ;  } ret;
                 ;  ret.b[3] = 0x00;
000124 9724      	SBIW R28,4
                 ;	ret -> Y+0
000125 e0e0      	LDI  R30,LOW(0)
000126 83eb      	STD  Y+3,R30
                 ;
                 ;  i2c_start();
000127 940e 0ad8 	CALL _i2c_start
                 ;  i2c_write(BMP280_I2C_ADDRESS);
000129 eeac      	LDI  R26,LOW(236)
00012a 940e 0b0c 	CALL _i2c_write
                 ;  i2c_write(BMP280_REG_PRESS_MSB);
00012c efa7      	LDI  R26,LOW(247)
00012d 940e 0b0c 	CALL _i2c_write
                 ;  i2c_start();
00012f 940e 091b 	CALL SUBOPT_0x1
                 ;  i2c_write(BMP280_I2C_ADDRESS | 1);
                 ;  ret.b[2] = i2c_read(1);
000131 940e 0920 	CALL SUBOPT_0x2
                 ;  ret.b[1] = i2c_read(1);
                 ;  ret.b[0] = i2c_read(1);
000133 e0a1      	LDI  R26,LOW(1)
000134 940e 0af1 	CALL _i2c_read
000136 83e8      	ST   Y,R30
                 ;
                 ;  adc_P = (ret.dw >> 4) & 0xFFFFF;
000137 940e 0929 	CALL SUBOPT_0x3
000139 93e0 0264 	STS  _adc_P,R30
00013b 93f0 0265 	STS  _adc_P+1,R31
00013d 9360 0266 	STS  _adc_P+2,R22
00013f 9370 0267 	STS  _adc_P+3,R23
                 ;
                 ;  ret.b[2] = i2c_read(1);
000141 940e 0920 	CALL SUBOPT_0x2
                 ;  ret.b[1] = i2c_read(1);
                 ;  ret.b[0] = i2c_read(0);
000143 e0a0      	LDI  R26,LOW(0)
000144 940e 0af1 	CALL _i2c_read
000146 83e8      	ST   Y,R30
                 ;  i2c_stop();
000147 940e 0ae7 	CALL _i2c_stop
                 ;
                 ;  adc_T = (ret.dw >> 4) & 0xFFFFF;
000149 940e 0929 	CALL SUBOPT_0x3
00014b 93e0 0260 	STS  _adc_T,R30
00014d 93f0 0261 	STS  _adc_T+1,R31
00014f 9360 0262 	STS  _adc_T+2,R22
000151 9370 0263 	STS  _adc_T+3,R23
                 ;}
000153 9624      	ADIW R28,4
000154 9508      	RET
                 ; .FEND
                 ;
                 ;// Reads temperature from BMP280 sensor.
                 ;// Temperature is stored in hundredths C (output value of "5123" equals 51.23 DegC).
                 ;// Temperature value is saved to *temp, returns 1 if OK and 0 if error.
                 ;short BMP280_readTemperature(int32_t *temp)
                 ;{
                 _BMP280_readTemperature:
                 ; .FSTART _BMP280_readTemperature
                 ;  int32_t var1, var2;
                 ;
                 ;  BMP280_Update();
000155 93ba      	ST   -Y,R27
000156 93aa      	ST   -Y,R26
000157 9728      	SBIW R28,8
                 ;	*temp -> Y+8
                 ;	var1 -> Y+4
                 ;	var2 -> Y+0
000158 dfcb      	RCALL _BMP280_Update
                 ;
                 ;  // calculate temperature
                 ;  var1 = ((((adc_T / 8) - ((int32_t)BMP280_calib.dig_T1 * 2))) *
                 ;         ((int32_t)BMP280_calib.dig_T2)) / 2048;
000159 940e 0933 	CALL SUBOPT_0x4
00015b 940e 093c 	CALL SUBOPT_0x5
00015d 937f      	PUSH R23
00015e 936f      	PUSH R22
00015f 93ff      	PUSH R31
000160 93ef      	PUSH R30
000161 91a0 026c 	LDS  R26,_BMP280_calib
000163 91b0 026d 	LDS  R27,_BMP280_calib+1
000165 2788      	CLR  R24
000166 2799      	CLR  R25
000167 940e 0943 	CALL SUBOPT_0x6
000169 940e 0d38 	CALL __MULD12
00016b 91af      	POP  R26
00016c 91bf      	POP  R27
00016d 918f      	POP  R24
00016e 919f      	POP  R25
00016f 940e 0cea 	CALL __SUBD21
                +
000171 91e0 026e+LDS R30 , _BMP280_calib + ( 2 )
000173 91f0 026f+LDS R31 , _BMP280_calib + ( 2 ) + 1
                 	__GETW1MN _BMP280_calib,2
000175 940e 0948 	CALL SUBOPT_0x7
000177 940e 094f 	CALL SUBOPT_0x8
000179 940e 0956 	CALL SUBOPT_0x9
                 ;
                 ;  var2 = (((((adc_T / 16) - ((int32_t)BMP280_calib.dig_T1)) *
                 ;         ((adc_T / 16) - ((int32_t)BMP280_calib.dig_T1))) / 4096) *
                 ;         ((int32_t)BMP280_calib.dig_T3)) / 16384;
00017b 940e 0933 	CALL SUBOPT_0x4
00017d 940e 095b 	CALL SUBOPT_0xA
00017f 01df      	MOVW R26,R30
000180 01cb      	MOVW R24,R22
000181 91e0 026c 	LDS  R30,_BMP280_calib
000183 91f0 026d 	LDS  R31,_BMP280_calib+1
000185 2766      	CLR  R22
000186 2777      	CLR  R23
000187 940e 0de5 	CALL __SWAPD12
000189 940e 0ce5 	CALL __SUBD12
00018b 940e 0962 	CALL SUBOPT_0xB
00018d 940e 0969 	CALL SUBOPT_0xC
00018f 01df      	MOVW R26,R30
000190 01cb      	MOVW R24,R22
                +
000191 91e0 0270+LDS R30 , _BMP280_calib + ( 4 )
000193 91f0 0271+LDS R31 , _BMP280_calib + ( 4 ) + 1
                 	__GETW1MN _BMP280_calib,4
000195 940e 0948 	CALL SUBOPT_0x7
                +
000197 e0e0     +LDI R30 , LOW ( 0x4000 )
000198 e4f0     +LDI R31 , HIGH ( 0x4000 )
000199 e060     +LDI R22 , BYTE3 ( 0x4000 )
00019a e070     +LDI R23 , BYTE4 ( 0x4000 )
                 	__GETD1N 0x4000
00019b 940e 0d75 	CALL __DIVD21
00019d 940e 0970 	CALL SUBOPT_0xD
                 ;
                 ;  t_fine = var1 + var2;
00019f 940e 0973 	CALL SUBOPT_0xE
0001a1 940e 0976 	CALL SUBOPT_0xF
0001a3 93e0 0268 	STS  _t_fine,R30
0001a5 93f0 0269 	STS  _t_fine+1,R31
0001a7 9360 026a 	STS  _t_fine+2,R22
0001a9 9370 026b 	STS  _t_fine+3,R23
                 ;
                 ;  *temp = (t_fine * 5 + 128) / 256;
                +
0001ab e0a5     +LDI R26 , LOW ( 0x5 )
0001ac e0b0     +LDI R27 , HIGH ( 0x5 )
0001ad e080     +LDI R24 , BYTE3 ( 0x5 )
0001ae e090     +LDI R25 , BYTE4 ( 0x5 )
                 	__GETD2N 0x5
0001af 940e 0d38 	CALL __MULD12
                +
0001b1 58e0     +SUBI R30 , LOW ( - 128 )
0001b2 4fff     +SBCI R31 , HIGH ( - 128 )
0001b3 4f6f     +SBCI R22 , BYTE3 ( - 128 )
0001b4 4f7f     +SBCI R23 , BYTE4 ( - 128 )
                 	__ADDD1N 128
0001b5 01df      	MOVW R26,R30
0001b6 01cb      	MOVW R24,R22
                +
0001b7 e0e0     +LDI R30 , LOW ( 0x100 )
0001b8 e0f1     +LDI R31 , HIGH ( 0x100 )
0001b9 e060     +LDI R22 , BYTE3 ( 0x100 )
0001ba e070     +LDI R23 , BYTE4 ( 0x100 )
                 	__GETD1N 0x100
0001bb 940e 0d75 	CALL __DIVD21
0001bd 85a8      	LDD  R26,Y+8
0001be 85b9      	LDD  R27,Y+8+1
0001bf 940e 0dc7 	CALL __PUTDP1
                 ;
                 ;  return 1;
0001c1 e0e1      	LDI  R30,LOW(1)
0001c2 e0f0      	LDI  R31,HIGH(1)
0001c3 962a      	ADIW R28,10
0001c4 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;// Reads pressure from BMP280 sensor.
                 ;// Pressure is stored in Pa (output value of "96386" equals 96386 Pa = 963.86 hPa).
                 ;// Pressure value is saved to *pres, returns 1 if OK and 0 if error.
                 ;short BMP280_readPressure(uint32_t *pres)
                 ;{
                 _BMP280_readPressure:
                 ; .FSTART _BMP280_readPressure
                 ;  int32_t var1, var2;
                 ;  uint32_t p;
                 ;
                 ;  // calculate pressure
                 ;  var1 = (((int32_t)t_fine) / 2) - (int32_t)64000;
0001c5 93ba      	ST   -Y,R27
0001c6 93aa      	ST   -Y,R26
0001c7 972c      	SBIW R28,12
                 ;	*pres -> Y+12
                 ;	var1 -> Y+8
                 ;	var2 -> Y+4
                 ;	p -> Y+0
0001c8 91a0 0268 	LDS  R26,_t_fine
0001ca 91b0 0269 	LDS  R27,_t_fine+1
0001cc 9180 026a 	LDS  R24,_t_fine+2
0001ce 9190 026b 	LDS  R25,_t_fine+3
0001d0 940e 0943 	CALL SUBOPT_0x6
0001d2 940e 0d75 	CALL __DIVD21
                +
0001d4 50e0     +SUBI R30 , LOW ( 64000 )
0001d5 4ffa     +SBCI R31 , HIGH ( 64000 )
0001d6 4060     +SBCI R22 , BYTE3 ( 64000 )
0001d7 4070     +SBCI R23 , BYTE4 ( 64000 )
                 	__SUBD1N 64000
0001d8 940e 097d 	CALL SUBOPT_0x10
                 ;  var2 = (((var1/4) * (var1/4)) / 2048 ) * ((int32_t)BMP280_calib.dig_P6);
0001da 940e 0982 	CALL SUBOPT_0x11
0001dc 940e 0987 	CALL SUBOPT_0x12
0001de 940e 0962 	CALL SUBOPT_0xB
0001e0 940e 094f 	CALL SUBOPT_0x8
0001e2 01df      	MOVW R26,R30
0001e3 01cb      	MOVW R24,R22
                +
0001e4 91e0 027c+LDS R30 , _BMP280_calib + ( 16 )
0001e6 91f0 027d+LDS R31 , _BMP280_calib + ( 16 ) + 1
                 	__GETW1MN _BMP280_calib,16
0001e8 940e 0d0e 	CALL __CWD1
0001ea 940e 0d38 	CALL __MULD12
0001ec 940e 0956 	CALL SUBOPT_0x9
                 ;
                 ;  var2 = var2 + ((var1 * ((int32_t)BMP280_calib.dig_P5)) * 2);
                +
0001ee 91e0 027a+LDS R30 , _BMP280_calib + ( 14 )
0001f0 91f0 027b+LDS R31 , _BMP280_calib + ( 14 ) + 1
                 	__GETW1MN _BMP280_calib,14
0001f2 940e 098e 	CALL SUBOPT_0x13
0001f4 940e 0d03 	CALL __LSLD1
0001f6 940e 0976 	CALL SUBOPT_0xF
0001f8 940e 0956 	CALL SUBOPT_0x9
                 ;  var2 = (var2/4) + (((int32_t)BMP280_calib.dig_P4) * 65536);
0001fa 940e 0994 	CALL SUBOPT_0x14
0001fc 940e 0987 	CALL SUBOPT_0x12
0001fe 937f      	PUSH R23
0001ff 936f      	PUSH R22
000200 93ff      	PUSH R31
000201 93ef      	PUSH R30
                +
000202 91a0 0278+LDS R26 , _BMP280_calib + ( 12 )
000204 91b0 0279+LDS R27 , _BMP280_calib + ( 12 ) + 1
                 	__GETW2MN _BMP280_calib,12
000206 940e 0d13 	CALL __CWD2
                +
000208 e0e0     +LDI R30 , LOW ( 0x10000 )
000209 e0f0     +LDI R31 , HIGH ( 0x10000 )
00020a e061     +LDI R22 , BYTE3 ( 0x10000 )
00020b e070     +LDI R23 , BYTE4 ( 0x10000 )
                 	__GETD1N 0x10000
00020c 940e 0d38 	CALL __MULD12
00020e 91af      	POP  R26
00020f 91bf      	POP  R27
000210 918f      	POP  R24
000211 919f      	POP  R25
000212 940e 0cdb 	CALL __ADDD12
000214 940e 0956 	CALL SUBOPT_0x9
                 ;
                 ;  var1 = ((((int32_t)BMP280_calib.dig_P3 * (((var1/4) * (var1/4)) / 8192 )) / 8) +
                 ;         ((((int32_t)BMP280_calib.dig_P2) * var1)/2)) / 262144;
                +
000216 91e0 0276+LDS R30 , _BMP280_calib + ( 10 )
000218 91f0 0277+LDS R31 , _BMP280_calib + ( 10 ) + 1
                 	__GETW1MN _BMP280_calib,10
00021a 940e 0d0e 	CALL __CWD1
00021c 937f      	PUSH R23
00021d 936f      	PUSH R22
00021e 93ff      	PUSH R31
00021f 93ef      	PUSH R30
000220 940e 0982 	CALL SUBOPT_0x11
000222 940e 0987 	CALL SUBOPT_0x12
000224 937f      	PUSH R23
000225 936f      	PUSH R22
000226 93ff      	PUSH R31
000227 93ef      	PUSH R30
000228 940e 0982 	CALL SUBOPT_0x11
00022a 940e 0987 	CALL SUBOPT_0x12
00022c 91af      	POP  R26
00022d 91bf      	POP  R27
00022e 918f      	POP  R24
00022f 919f      	POP  R25
000230 940e 0999 	CALL SUBOPT_0x15
000232 940e 099e 	CALL SUBOPT_0x16
000234 940e 0d75 	CALL __DIVD21
000236 91af      	POP  R26
000237 91bf      	POP  R27
000238 918f      	POP  R24
000239 919f      	POP  R25
00023a 940e 0999 	CALL SUBOPT_0x15
00023c 940e 093c 	CALL SUBOPT_0x5
00023e 937f      	PUSH R23
00023f 936f      	PUSH R22
000240 93ff      	PUSH R31
000241 93ef      	PUSH R30
                +
000242 91e0 0274+LDS R30 , _BMP280_calib + ( 8 )
000244 91f0 0275+LDS R31 , _BMP280_calib + ( 8 ) + 1
                 	__GETW1MN _BMP280_calib,8
000246 940e 098e 	CALL SUBOPT_0x13
000248 01df      	MOVW R26,R30
000249 01cb      	MOVW R24,R22
00024a 940e 0943 	CALL SUBOPT_0x6
00024c 940e 0d75 	CALL __DIVD21
00024e 91af      	POP  R26
00024f 91bf      	POP  R27
000250 918f      	POP  R24
000251 919f      	POP  R25
000252 940e 0ce0 	CALL __ADDD21
                +
000254 e0e0     +LDI R30 , LOW ( 0x40000 )
000255 e0f0     +LDI R31 , HIGH ( 0x40000 )
000256 e064     +LDI R22 , BYTE3 ( 0x40000 )
000257 e070     +LDI R23 , BYTE4 ( 0x40000 )
                 	__GETD1N 0x40000
000258 940e 09a3 	CALL SUBOPT_0x17
                 ;
                 ;  var1 =((((32768 + var1)) * ((int32_t)BMP280_calib.dig_P1)) / 32768);
                +
00025a 50e0     +SUBI R30 , LOW ( - 32768 )
00025b 48f0     +SBCI R31 , HIGH ( - 32768 )
00025c 4f6f     +SBCI R22 , BYTE3 ( - 32768 )
00025d 4f7f     +SBCI R23 , BYTE4 ( - 32768 )
                 	__ADDD1N 32768
00025e 01df      	MOVW R26,R30
00025f 01cb      	MOVW R24,R22
                +
000260 91e0 0272+LDS R30 , _BMP280_calib + ( 6 )
000262 91f0 0273+LDS R31 , _BMP280_calib + ( 6 ) + 1
                 	__GETW1MN _BMP280_calib,6
000264 2766      	CLR  R22
000265 2777      	CLR  R23
000266 940e 0999 	CALL SUBOPT_0x15
                +
000268 e0e0     +LDI R30 , LOW ( 0x8000 )
000269 e8f0     +LDI R31 , HIGH ( 0x8000 )
00026a e060     +LDI R22 , BYTE3 ( 0x8000 )
00026b e070     +LDI R23 , BYTE4 ( 0x8000 )
                 	__GETD1N 0x8000
00026c 940e 09a3 	CALL SUBOPT_0x17
                 ;
                 ;  if (var1 == 0)
00026e 940e 0df2 	CALL __CPD10
000270 f419      	BRNE _0xB
                 ;    return 0; // avoid exception caused by division by zero
000271 e0e0      	LDI  R30,LOW(0)
000272 e0f0      	LDI  R31,HIGH(0)
000273 c0a1      	RJMP _0x20C000A
                 ;
                 ;  p = (((uint32_t)(((int32_t)1048576) - adc_P) - (var2 / 4096))) * 3125;
                 _0xB:
000274 91a0 0264 	LDS  R26,_adc_P
000276 91b0 0265 	LDS  R27,_adc_P+1
000278 9180 0266 	LDS  R24,_adc_P+2
00027a 9190 0267 	LDS  R25,_adc_P+3
                +
00027c e0e0     +LDI R30 , LOW ( 0x100000 )
00027d e0f0     +LDI R31 , HIGH ( 0x100000 )
00027e e160     +LDI R22 , BYTE3 ( 0x100000 )
00027f e070     +LDI R23 , BYTE4 ( 0x100000 )
                 	__GETD1N 0x100000
000280 940e 0ce5 	CALL __SUBD12
000282 937f      	PUSH R23
000283 936f      	PUSH R22
000284 93ff      	PUSH R31
000285 93ef      	PUSH R30
000286 940e 0994 	CALL SUBOPT_0x14
000288 940e 0969 	CALL SUBOPT_0xC
00028a 91af      	POP  R26
00028b 91bf      	POP  R27
00028c 918f      	POP  R24
00028d 919f      	POP  R25
00028e 940e 0cea 	CALL __SUBD21
                +
000290 e3e5     +LDI R30 , LOW ( 0xC35 )
000291 e0fc     +LDI R31 , HIGH ( 0xC35 )
000292 e060     +LDI R22 , BYTE3 ( 0xC35 )
000293 e070     +LDI R23 , BYTE4 ( 0xC35 )
                 	__GETD1N 0xC35
000294 940e 0d18 	CALL __MULD12U
000296 940e 0970 	CALL SUBOPT_0xD
                 ;
                 ;  if (p < 0x80000000)
000298 940e 09ab 	CALL SUBOPT_0x18
                +
00029a 30a0     +CPI R26 , LOW ( 0x80000000 )
00029b e0e0     +LDI R30 , HIGH ( 0x80000000 )
00029c 07be     +CPC R27 , R30
00029d e0e0     +LDI R30 , BYTE3 ( 0x80000000 )
00029e 078e     +CPC R24 , R30
00029f e8e0     +LDI R30 , BYTE4 ( 0x80000000 )
0002a0 079e     +CPC R25 , R30
                 	__CPD2N 0x80000000
0002a1 f468      	BRSH _0xC
                 ;    p = (p * 2) / ((uint32_t)var1);
0002a2 940e 0973 	CALL SUBOPT_0xE
0002a4 940e 0d03 	CALL __LSLD1
0002a6 01df      	MOVW R26,R30
0002a7 01cb      	MOVW R24,R22
                +
0002a8 85e8     +LDD R30 , Y + 8
0002a9 85f9     +LDD R31 , Y + 8 + 1
0002aa 856a     +LDD R22 , Y + 8 + 2
0002ab 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0002ac 940e 0d50 	CALL __DIVD21U
0002ae c00a      	RJMP _0x23
                 ;
                 ;  else
                 _0xC:
                 ;    p = (p / (uint32_t)var1) * 2;
                +
0002af 85e8     +LDD R30 , Y + 8
0002b0 85f9     +LDD R31 , Y + 8 + 1
0002b1 856a     +LDD R22 , Y + 8 + 2
0002b2 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0002b3 940e 09ab 	CALL SUBOPT_0x18
0002b5 940e 0d50 	CALL __DIVD21U
0002b7 940e 0d03 	CALL __LSLD1
                 _0x23:
0002b9 940e 0dd6 	CALL __PUTD1S0
                 ;
                 ;  var1 = (((int32_t)BMP280_calib.dig_P9) * ((int32_t)(((p/8) * (p/8)) / 8192))) / 4096;
                +
0002bb 91e0 0282+LDS R30 , _BMP280_calib + ( 22 )
0002bd 91f0 0283+LDS R31 , _BMP280_calib + ( 22 ) + 1
                 	__GETW1MN _BMP280_calib,22
0002bf 940e 0d0e 	CALL __CWD1
0002c1 937f      	PUSH R23
0002c2 936f      	PUSH R22
0002c3 93ff      	PUSH R31
0002c4 93ef      	PUSH R30
0002c5 940e 09ae 	CALL SUBOPT_0x19
0002c7 937f      	PUSH R23
0002c8 936f      	PUSH R22
0002c9 93ff      	PUSH R31
0002ca 93ef      	PUSH R30
0002cb 940e 09ae 	CALL SUBOPT_0x19
0002cd 91af      	POP  R26
0002ce 91bf      	POP  R27
0002cf 918f      	POP  R24
0002d0 919f      	POP  R25
0002d1 940e 0d18 	CALL __MULD12U
0002d3 01df      	MOVW R26,R30
0002d4 01cb      	MOVW R24,R22
0002d5 940e 099e 	CALL SUBOPT_0x16
0002d7 940e 0d50 	CALL __DIVD21U
0002d9 91af      	POP  R26
0002da 91bf      	POP  R27
0002db 918f      	POP  R24
0002dc 919f      	POP  R25
0002dd 940e 0999 	CALL SUBOPT_0x15
0002df 940e 0969 	CALL SUBOPT_0xC
0002e1 940e 097d 	CALL SUBOPT_0x10
                 ;  var2 = (((int32_t)(p/4)) * ((int32_t)BMP280_calib.dig_P8)) / 8192;
0002e3 940e 09ab 	CALL SUBOPT_0x18
                +
0002e5 e0e4     +LDI R30 , LOW ( 0x4 )
0002e6 e0f0     +LDI R31 , HIGH ( 0x4 )
0002e7 e060     +LDI R22 , BYTE3 ( 0x4 )
0002e8 e070     +LDI R23 , BYTE4 ( 0x4 )
                 	__GETD1N 0x4
0002e9 940e 0d50 	CALL __DIVD21U
0002eb 01df      	MOVW R26,R30
0002ec 01cb      	MOVW R24,R22
                +
0002ed 91e0 0280+LDS R30 , _BMP280_calib + ( 20 )
0002ef 91f0 0281+LDS R31 , _BMP280_calib + ( 20 ) + 1
                 	__GETW1MN _BMP280_calib,20
0002f1 940e 0948 	CALL SUBOPT_0x7
0002f3 940e 099e 	CALL SUBOPT_0x16
0002f5 940e 0d75 	CALL __DIVD21
0002f7 940e 09b6 	CALL SUBOPT_0x1A
                 ;
                 ;  p = (uint32_t)((int32_t)p + ((var1 + var2 + (int32_t)BMP280_calib.dig_P7) / 16));
0002f9 940e 0982 	CALL SUBOPT_0x11
0002fb 940e 0ce0 	CALL __ADDD21
                +
0002fd 91e0 027e+LDS R30 , _BMP280_calib + ( 18 )
0002ff 91f0 027f+LDS R31 , _BMP280_calib + ( 18 ) + 1
                 	__GETW1MN _BMP280_calib,18
000301 940e 0d0e 	CALL __CWD1
000303 940e 0ce0 	CALL __ADDD21
000305 940e 095b 	CALL SUBOPT_0xA
000307 940e 09ab 	CALL SUBOPT_0x18
000309 940e 0cdb 	CALL __ADDD12
00030b 940e 0970 	CALL SUBOPT_0xD
                 ;
                 ;  *pres = p;
00030d 940e 0973 	CALL SUBOPT_0xE
00030f 85ac      	LDD  R26,Y+12
000310 85bd      	LDD  R27,Y+12+1
000311 940e 0dc7 	CALL __PUTDP1
                 ;
                 ;  return 1;
000313 e0e1      	LDI  R30,LOW(1)
000314 e0f0      	LDI  R31,HIGH(1)
                 _0x20C000A:
000315 962e      	ADIW R28,14
000316 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;// end of code.
                 ;
                 ;char lcd[16];
                 ;int32_t temperature;
                 ;uint32_t pressure;
                 ;float i;
                 ;int MQ9;
                 ;
                 ;
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0025 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0026 ADMUX=adc_input | ADC_VREF_TYPE;
000317 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000318 81e8      	LD   R30,Y
000319 b9e7      	OUT  0x7,R30
                 ; 0000 0027 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0028 delay_us(10);
                +
00031a e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00031b 958a     +DEC R24
00031c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0029 // Start the AD conversion
                 ; 0000 002A ADCSRA|=(1<<ADSC);
00031d 9a36      	SBI  0x6,6
                 ; 0000 002B // Wait for the AD conversion to complete
                 ; 0000 002C while ((ADCSRA & (1<<ADIF))==0);
                 _0xE:
00031e 9b34      	SBIS 0x6,4
00031f cffe      	RJMP _0xE
                 ; 0000 002D ADCSRA|=(1<<ADIF);
000320 9a34      	SBI  0x6,4
                 ; 0000 002E return ADCW;
000321 b1e4      	IN   R30,0x4
000322 b1f5      	IN   R31,0x4+1
000323 c037      	RJMP _0x20C0009
                 ; 0000 002F }
                 ; .FEND
                 ;
                 ;
                 ;void adc_init(unsigned char prescaler)
                 ; 0000 0033 {
                 _adc_init:
                 ; .FSTART _adc_init
                 ; 0000 0034     // ADC initialization
                 ; 0000 0035     // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0036     // ADC Voltage Reference: AREF pin
                 ; 0000 0037     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0038 
                 ; 0000 0039     ADMUX = ADC_VREF_TYPE;
000324 93aa      	ST   -Y,R26
                 ;	prescaler -> Y+0
000325 e0e0      	LDI  R30,LOW(0)
000326 b9e7      	OUT  0x7,R30
                 ; 0000 003A     ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE);
000327 e8e0      	LDI  R30,LOW(128)
000328 b9e6      	OUT  0x6,R30
                 ; 0000 003B 
                 ; 0000 003C     //default MCU clock frequency is considered 8MHz.
                 ; 0000 003D     //for 1000.000 kHz ADC frequency, prescaler 64 is used with ADPS registers.
                 ; 0000 003E 
                 ; 0000 003F     switch (prescaler)
000329 81e8      	LD   R30,Y
00032a e0f0      	LDI  R31,0
                 ; 0000 0040     {
                 ; 0000 0041         case 2:
00032b 30e2      	CPI  R30,LOW(0x2)
00032c e0a0      	LDI  R26,HIGH(0x2)
00032d 07fa      	CPC  R31,R26
00032e f411      	BRNE _0x14
                 ; 0000 0042             ADCSRA |= (0 << ADPS2) | (0 << ADPS1) | (1 << ADPS0);
00032f 9a30      	SBI  0x6,0
                 ; 0000 0043             break;
000330 c028      	RJMP _0x13
                 ; 0000 0044         case 4:
                 _0x14:
000331 30e4      	CPI  R30,LOW(0x4)
000332 e0a0      	LDI  R26,HIGH(0x4)
000333 07fa      	CPC  R31,R26
000334 f411      	BRNE _0x15
                 ; 0000 0045             ADCSRA |= (0 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
000335 9a31      	SBI  0x6,1
                 ; 0000 0046             break;
000336 c022      	RJMP _0x13
                 ; 0000 0047         case 8:
                 _0x15:
000337 30e8      	CPI  R30,LOW(0x8)
000338 e0a0      	LDI  R26,HIGH(0x8)
000339 07fa      	CPC  R31,R26
00033a f419      	BRNE _0x16
                 ; 0000 0048             ADCSRA |= (0 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
00033b b1e6      	IN   R30,0x6
00033c 60e3      	ORI  R30,LOW(0x3)
00033d c01a      	RJMP _0x24
                 ; 0000 0049             break;
                 ; 0000 004A         case 16:
                 _0x16:
00033e 31e0      	CPI  R30,LOW(0x10)
00033f e0a0      	LDI  R26,HIGH(0x10)
000340 07fa      	CPC  R31,R26
000341 f411      	BRNE _0x17
                 ; 0000 004B             ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (0 << ADPS0);
000342 9a32      	SBI  0x6,2
                 ; 0000 004C             break;
000343 c015      	RJMP _0x13
                 ; 0000 004D         case 32:
                 _0x17:
000344 32e0      	CPI  R30,LOW(0x20)
000345 e0a0      	LDI  R26,HIGH(0x20)
000346 07fa      	CPC  R31,R26
000347 f419      	BRNE _0x18
                 ; 0000 004E             ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (1 << ADPS0);
000348 b1e6      	IN   R30,0x6
000349 60e5      	ORI  R30,LOW(0x5)
00034a c00d      	RJMP _0x24
                 ; 0000 004F             break;
                 ; 0000 0050         case 64:
                 _0x18:
00034b 34e0      	CPI  R30,LOW(0x40)
00034c e0a0      	LDI  R26,HIGH(0x40)
00034d 07fa      	CPC  R31,R26
00034e f039      	BREQ _0x25
                 ; 0000 0051             ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
                 ; 0000 0052             break;
                 ; 0000 0053         case 128:
00034f 38e0      	CPI  R30,LOW(0x80)
000350 e0a0      	LDI  R26,HIGH(0x80)
000351 07fa      	CPC  R31,R26
000352 f419      	BRNE _0x1B
                 ; 0000 0054             ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
000353 b1e6      	IN   R30,0x6
000354 60e7      	ORI  R30,LOW(0x7)
000355 c002      	RJMP _0x24
                 ; 0000 0055             break;
                 ; 0000 0056         default:
                 _0x1B:
                 ; 0000 0057             // Default to prescaler 64
                 ; 0000 0058             ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
                 _0x25:
000356 b1e6      	IN   R30,0x6
000357 60e6      	ORI  R30,LOW(0x6)
                 _0x24:
000358 b9e6      	OUT  0x6,R30
                 ; 0000 0059             break;
                 ; 0000 005A     }
                 _0x13:
                 ; 0000 005B 
                 ; 0000 005C     SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
000359 e0e0      	LDI  R30,LOW(0)
00035a bfe0      	OUT  0x30,R30
                 ; 0000 005D }
                 _0x20C0009:
00035b 9621      	ADIW R28,1
00035c 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void usart_init()
                 ; 0000 0062 {
                 _usart_init:
                 ; .FSTART _usart_init
                 ; 0000 0063  // USART initialization
                 ; 0000 0064 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0065 // USART Receiver: Off
                 ; 0000 0066 // USART Transmitter: On
                 ; 0000 0067 // USART Mode: Asynchronous
                 ; 0000 0068 // USART Baud Rate: 9600
                 ; 0000 0069 UCSRA=0;
00035d e0e0      	LDI  R30,LOW(0)
00035e b9eb      	OUT  0xB,R30
                 ; 0000 006A UCSRB= (1<<TXEN) ;
00035f e0e8      	LDI  R30,LOW(8)
000360 b9ea      	OUT  0xA,R30
                 ; 0000 006B UCSRC=(1<<URSEL)| (1<<UCSZ1) | (1<<UCSZ0);
000361 e8e6      	LDI  R30,LOW(134)
000362 bde0      	OUT  0x20,R30
                 ; 0000 006C UBRRH=0x00;
000363 e0e0      	LDI  R30,LOW(0)
000364 bde0      	OUT  0x20,R30
                 ; 0000 006D UBRRL=0x33;
000365 e3e3      	LDI  R30,LOW(51)
000366 b9e9      	OUT  0x9,R30
                 ; 0000 006E }
000367 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0072 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0073 // Declare your local variables here
                 ; 0000 0074 
                 ; 0000 0075 // Input/Output Ports initialization
                 ; 0000 0076 // Port A initialization
                 ; 0000 0077 DDRA= (0<<DDA0);
000368 e0e0      	LDI  R30,LOW(0)
000369 bbea      	OUT  0x1A,R30
                 ; 0000 0078 PORTA= (0<<PORTA0);
00036a bbeb      	OUT  0x1B,R30
                 ; 0000 0079 
                 ; 0000 007A 
                 ; 0000 007B 
                 ; 0000 007C // Bit-Banged I2C Bus initialization
                 ; 0000 007D // I2C Port: PORTC
                 ; 0000 007E // I2C SDA bit: 1
                 ; 0000 007F // I2C SCL bit: 0
                 ; 0000 0080 // Bit Rate: 100 kHz
                 ; 0000 0081 // Note: I2C settings are specified in the
                 ; 0000 0082 // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 0083 i2c_init();
00036b 940e 0ad3 	CALL _i2c_init
                 ; 0000 0084 
                 ; 0000 0085 // Alphanumeric LCD initialization
                 ; 0000 0086 // Connections are specified in the
                 ; 0000 0087 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0088 // RS - PORTB Bit 0
                 ; 0000 0089 // RD - PORTB Bit 1
                 ; 0000 008A // EN - PORTB Bit 2
                 ; 0000 008B // D4 - PORTB Bit 4
                 ; 0000 008C // D5 - PORTB Bit 5
                 ; 0000 008D // D6 - PORTB Bit 6
                 ; 0000 008E // D7 - PORTB Bit 7
                 ; 0000 008F // Characters/line: 16
                 ; 0000 0090 lcd_init(16);
00036d e1a0      	LDI  R26,LOW(16)
00036e 940e 087b 	CALL _lcd_init
                 ; 0000 0091 adc_init(64);
000370 e4a0      	LDI  R26,LOW(64)
000371 dfb2      	RCALL _adc_init
                 ; 0000 0092 usart_init();
000372 dfea      	RCALL _usart_init
                 ; 0000 0093 
                 ; 0000 0094 
                 ; 0000 0095 // initialize the BMP280 sensor
                 ; 0000 0096   if(BMP280_begin() == 0)
000373 dd4b      	RCALL _BMP280_begin
000374 9730      	SBIW R30,0
000375 f449      	BRNE _0x1C
                 ; 0000 0097   {  // connection error or device address wrong!
                 ; 0000 0098     lcd_gotoxy(0, 0);
000376 e0e0      	LDI  R30,LOW(0)
000377 93ea      	ST   -Y,R30
000378 e0a0      	LDI  R26,LOW(0)
000379 940e 0862 	CALL _lcd_gotoxy
                 ; 0000 0099     putsf("Connection error!");
                +
00037b e5a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
00037c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
00037d 940e 0409 	CALL _putsf
                 ; 0000 009A 
                 ; 0000 009B   }
                 ; 0000 009C 
                 ; 0000 009D 
                 ; 0000 009E while (1)
                 _0x1C:
                 _0x1D:
                 ; 0000 009F       {
                 ; 0000 00A0     // Read temperature (in hundredths C) and pressure (in Pa)
                 ; 0000 00A1     // values from BMP280 sensor
                 ; 0000 00A2     BMP280_readTemperature(&temperature);  // read temperature
00037f e9a4      	LDI  R26,LOW(_temperature)
000380 e0b2      	LDI  R27,HIGH(_temperature)
000381 ddd3      	RCALL _BMP280_readTemperature
                 ; 0000 00A3     BMP280_readPressure(&pressure);        // read pressure
000382 e9a8      	LDI  R26,LOW(_pressure)
000383 e0b2      	LDI  R27,HIGH(_pressure)
000384 de40      	RCALL _BMP280_readPressure
                 ; 0000 00A4 
                 ; 0000 00A5     i=read_adc(0);
000385 e0a0      	LDI  R26,LOW(0)
000386 df90      	RCALL _read_adc
000387 e9ac      	LDI  R26,LOW(_i)
000388 e0b2      	LDI  R27,HIGH(_i)
000389 2766      	CLR  R22
00038a 2777      	CLR  R23
00038b 940e 0b9a 	CALL __CDF1
00038d 940e 0dc7 	CALL __PUTDP1
                 ; 0000 00A6     MQ9=(i*100)/1023 ;
00038f 91a0 029c 	LDS  R26,_i
000391 91b0 029d 	LDS  R27,_i+1
000393 9180 029e 	LDS  R24,_i+2
000395 9190 029f 	LDS  R25,_i+3
                +
000397 e0e0     +LDI R30 , LOW ( 0x42C80000 )
000398 e0f0     +LDI R31 , HIGH ( 0x42C80000 )
000399 ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
00039a e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
00039b 940e 0c24 	CALL __MULF12
00039d 01df      	MOVW R26,R30
00039e 01cb      	MOVW R24,R22
                +
00039f e0e0     +LDI R30 , LOW ( 0x447FC000 )
0003a0 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
0003a1 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
0003a2 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
0003a3 940e 0c72 	CALL __DIVF21
0003a5 940e 0b63 	CALL __CFD1
0003a7 012f      	MOVW R4,R30
                 ; 0000 00A7 
                 ; 0000 00A8     // print data on the LCD screen
                 ; 0000 00A9     // 1: print temperature
                 ; 0000 00AA     // 2: print pressure
                 ; 0000 00AB     lcd_gotoxy(0, 0);
0003a8 e0e0      	LDI  R30,LOW(0)
0003a9 93ea      	ST   -Y,R30
0003aa e0a0      	LDI  R26,LOW(0)
0003ab 940e 0862 	CALL _lcd_gotoxy
                 ; 0000 00AC     if(temperature < 0)
0003ad 91a0 0297 	LDS  R26,_temperature+3
0003af 23aa      	TST  R26
0003b0 f49a      	BRPL _0x20
                 ; 0000 00AD     {
                 ; 0000 00AE       putchar('-');
0003b1 e2ad      	LDI  R26,LOW(45)
0003b2 d040      	RCALL _putchar
                 ; 0000 00AF       temperature = abs(temperature);
0003b3 91a0 0294 	LDS  R26,_temperature
0003b5 91b0 0295 	LDS  R27,_temperature+1
0003b7 940e 0772 	CALL _abs
0003b9 2766      	CLR  R22
0003ba 2777      	CLR  R23
0003bb 93e0 0294 	STS  _temperature,R30
0003bd 93f0 0295 	STS  _temperature+1,R31
0003bf 9360 0296 	STS  _temperature+2,R22
0003c1 9370 0297 	STS  _temperature+3,R23
                 ; 0000 00B0     }
                 ; 0000 00B1     else
0003c3 c025      	RJMP _0x21
                 _0x20:
                 ; 0000 00B2 
                 ; 0000 00B3    sprintf(lcd, "%02u.%02u,%04u.%02u,%d", temperature / 100, temperature % 100, pressure / 100, pressure % 100, MQ9);
0003c4 e8e4      	LDI  R30,LOW(_lcd)
0003c5 e0f2      	LDI  R31,HIGH(_lcd)
0003c6 93fa      	ST   -Y,R31
0003c7 93ea      	ST   -Y,R30
                +
0003c8 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 18 ) )
0003c9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 18 ) )
                 	__POINTW1FN _0x0,18
0003ca 93fa      	ST   -Y,R31
0003cb 93ea      	ST   -Y,R30
0003cc 940e 09bc 	CALL SUBOPT_0x1B
0003ce 940e 0d75 	CALL __DIVD21
0003d0 940e 0ddb 	CALL __PUTPARD1
0003d2 940e 09bc 	CALL SUBOPT_0x1B
0003d4 940e 0d8a 	CALL __MODD21
0003d6 940e 09c9 	CALL SUBOPT_0x1C
0003d8 940e 0d50 	CALL __DIVD21U
0003da 940e 09c9 	CALL SUBOPT_0x1C
0003dc 940e 0d86 	CALL __MODD21U
0003de 940e 0ddb 	CALL __PUTPARD1
0003e0 01f2      	MOVW R30,R4
0003e1 940e 0d0e 	CALL __CWD1
0003e3 940e 0ddb 	CALL __PUTPARD1
0003e5 e184      	LDI  R24,20
0003e6 940e 073e 	CALL _sprintf
0003e8 9668      	ADIW R28,24
                 ; 0000 00B4 
                 ; 0000 00B5 
                 ; 0000 00B6 
                 ; 0000 00B7 		puts(lcd);
                 _0x21:
0003e9 e8a4      	LDI  R26,LOW(_lcd)
0003ea e0b2      	LDI  R27,HIGH(_lcd)
0003eb 940e 03fa 	CALL _puts
                 ; 0000 00B8         delay_ms(2000);  // wait 2 seconds
0003ed eda0      	LDI  R26,LOW(2000)
0003ee e0b7      	LDI  R27,HIGH(2000)
0003ef 940e 0b24 	CALL _delay_ms
                 ; 0000 00B9 
                 ; 0000 00BA 
                 ; 0000 00BB 
                 ; 0000 00BC 
                 ; 0000 00BD 
                 ; 0000 00BE 
                 ; 0000 00BF       }
0003f1 cf8d      	RJMP _0x1D
                 ; 0000 00C0 }
                 _0x22:
0003f2 cfff      	RJMP _0x22
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0003f3 93aa      	ST   -Y,R26
                 putchar0:
0003f4 9b5d           sbis usr,udre
0003f5 cffe           rjmp putchar0
0003f6 81e8           ld   r30,y
0003f7 b9ec           out  udr,r30
0003f8 940c 08a7 	JMP  _0x20C0002
                 ; .FEND
                 _puts:
                 ; .FSTART _puts
0003fa 93ba      	ST   -Y,R27
0003fb 93aa      	ST   -Y,R26
0003fc 931a      	ST   -Y,R17
                 _0x2000003:
0003fd 81a9      	LDD  R26,Y+1
0003fe 81ba      	LDD  R27,Y+1+1
0003ff 91ed      	LD   R30,X+
000400 83a9      	STD  Y+1,R26
000401 83ba      	STD  Y+1+1,R27
000402 2f1e      	MOV  R17,R30
000403 30e0      	CPI  R30,0
000404 f019      	BREQ _0x2000005
000405 2fa1      	MOV  R26,R17
000406 dfec      	RCALL _putchar
000407 cff5      	RJMP _0x2000003
                 _0x2000005:
000408 c010      	RJMP _0x20C0007
                 ; .FEND
                 _putsf:
                 ; .FSTART _putsf
000409 93ba      	ST   -Y,R27
00040a 93aa      	ST   -Y,R26
00040b 931a      	ST   -Y,R17
                 _0x2000006:
00040c 81e9      	LDD  R30,Y+1
00040d 81fa      	LDD  R31,Y+1+1
00040e 9631      	ADIW R30,1
00040f 83e9      	STD  Y+1,R30
000410 83fa      	STD  Y+1+1,R31
000411 9731      	SBIW R30,1
000412 91e4      	LPM  R30,Z
000413 2f1e      	MOV  R17,R30
000414 30e0      	CPI  R30,0
000415 f019      	BREQ _0x2000008
000416 2fa1      	MOV  R26,R17
000417 dfdb      	RCALL _putchar
000418 cff3      	RJMP _0x2000006
                 _0x2000008:
                 _0x20C0007:
000419 e0aa      	LDI  R26,LOW(10)
00041a dfd8      	RCALL _putchar
00041b 8118      	LDD  R17,Y+0
                 _0x20C0008:
00041c 9623      	ADIW R28,3
00041d 9508      	RET
                 ; .FEND
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00041e 93ba      	ST   -Y,R27
00041f 93aa      	ST   -Y,R26
000420 931a      	ST   -Y,R17
000421 930a      	ST   -Y,R16
000422 81aa      	LDD  R26,Y+2
000423 81bb      	LDD  R27,Y+2+1
000424 9612      	ADIW R26,2
000425 940e 0dbd 	CALL __GETW1P
000427 9730      	SBIW R30,0
000428 f129      	BREQ _0x2000010
000429 81aa      	LDD  R26,Y+2
00042a 81bb      	LDD  R27,Y+2+1
00042b 9614      	ADIW R26,4
00042c 940e 0dbd 	CALL __GETW1P
00042e 018f      	MOVW R16,R30
00042f 9730      	SBIW R30,0
000430 f061      	BREQ _0x2000012
                +
000431 3002     +CPI R16 , LOW ( 2 )
000432 e0e0     +LDI R30 , HIGH ( 2 )
000433 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000434 f080      	BRLO _0x2000013
000435 01f8      	MOVW R30,R16
000436 9731      	SBIW R30,1
000437 018f      	MOVW R16,R30
                +
000438 81aa     +LDD R26 , Y + 2
000439 81bb     +LDD R27 , Y + 2 + 1
00043a 9614     +ADIW R26 , 4
00043b 93ed     +ST X + , R30
00043c 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00043d 81aa      	LDD  R26,Y+2
00043e 81bb      	LDD  R27,Y+2+1
00043f 9612      	ADIW R26,2
000440 940e 09d8 	CALL SUBOPT_0x1D
000442 9731      	SBIW R30,1
000443 81ac      	LDD  R26,Y+4
000444 83a0      	STD  Z+0,R26
                 _0x2000013:
000445 81aa      	LDD  R26,Y+2
000446 81bb      	LDD  R27,Y+2+1
000447 940e 0dbd 	CALL __GETW1P
000449 23ff      	TST  R31
00044a f012      	BRMI _0x2000014
00044b 940e 09d8 	CALL SUBOPT_0x1D
                 _0x2000014:
00044d c006      	RJMP _0x2000015
                 _0x2000010:
00044e 81aa      	LDD  R26,Y+2
00044f 81bb      	LDD  R27,Y+2+1
000450 efef      	LDI  R30,LOW(65535)
000451 efff      	LDI  R31,HIGH(65535)
000452 93ed      	ST   X+,R30
000453 93fc      	ST   X,R31
                 _0x2000015:
000454 8119      	LDD  R17,Y+1
000455 8108      	LDD  R16,Y+0
000456 9625      	ADIW R28,5
000457 9508      	RET
                 ; .FEND
                 __ftoe_G100:
                 ; .FSTART __ftoe_G100
000458 940e 09de 	CALL SUBOPT_0x1E
00045a e8e0      	LDI  R30,LOW(128)
00045b 83ea      	STD  Y+2,R30
00045c e3ef      	LDI  R30,LOW(63)
00045d 83eb      	STD  Y+3,R30
00045e 940e 0df8 	CALL __SAVELOCR4
000460 85ee      	LDD  R30,Y+14
000461 85ff      	LDD  R31,Y+14+1
000462 3fef      	CPI  R30,LOW(0xFFFF)
000463 efaf      	LDI  R26,HIGH(0xFFFF)
000464 07fa      	CPC  R31,R26
000465 f449      	BRNE _0x2000019
000466 85e8      	LDD  R30,Y+8
000467 85f9      	LDD  R31,Y+8+1
000468 93fa      	ST   -Y,R31
000469 93ea      	ST   -Y,R30
                +
00046a e7ae     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
00046b e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
00046c 940e 08a9 	CALL _strcpyf
00046e c0b1      	RJMP _0x20C0006
                 _0x2000019:
00046f 3fef      	CPI  R30,LOW(0x7FFF)
000470 e7af      	LDI  R26,HIGH(0x7FFF)
000471 07fa      	CPC  R31,R26
000472 f449      	BRNE _0x2000018
000473 85e8      	LDD  R30,Y+8
000474 85f9      	LDD  R31,Y+8+1
000475 93fa      	ST   -Y,R31
000476 93ea      	ST   -Y,R30
                +
000477 e7af     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
000478 e0b0     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
000479 940e 08a9 	CALL _strcpyf
00047b c0a4      	RJMP _0x20C0006
                 _0x2000018:
00047c 85ab      	LDD  R26,Y+11
00047d 30a7      	CPI  R26,LOW(0x7)
00047e f010      	BRLO _0x200001B
00047f e0e6      	LDI  R30,LOW(6)
000480 87eb      	STD  Y+11,R30
                 _0x200001B:
000481 851b      	LDD  R17,Y+11
                 _0x200001C:
000482 2fe1      	MOV  R30,R17
000483 5011      	SUBI R17,1
000484 30e0      	CPI  R30,0
000485 f019      	BREQ _0x200001E
000486 940e 09e5 	CALL SUBOPT_0x1F
000488 cff9      	RJMP _0x200001C
                 _0x200001E:
                +
000489 85ec     +LDD R30 , Y + 12
00048a 85fd     +LDD R31 , Y + 12 + 1
00048b 856e     +LDD R22 , Y + 12 + 2
00048c 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
00048d 940e 0df2 	CALL __CPD10
00048f f421      	BRNE _0x200001F
000490 e030      	LDI  R19,LOW(0)
000491 940e 09e5 	CALL SUBOPT_0x1F
000493 c02d      	RJMP _0x2000020
                 _0x200001F:
000494 853b      	LDD  R19,Y+11
000495 940e 09ed 	CALL SUBOPT_0x20
000497 f009      	BREQ PC+2
000498 f408      	BRCC PC+2
000499 c00b      	RJMP _0x2000021
00049a 940e 09e5 	CALL SUBOPT_0x1F
                 _0x2000022:
00049c 940e 09ed 	CALL SUBOPT_0x20
00049e f028      	BRLO _0x2000024
00049f 940e 09f8 	CALL SUBOPT_0x21
0004a1 940e 09fd 	CALL SUBOPT_0x22
0004a3 cff8      	RJMP _0x2000022
                 _0x2000024:
0004a4 c00d      	RJMP _0x2000025
                 _0x2000021:
                 _0x2000026:
0004a5 940e 09ed 	CALL SUBOPT_0x20
0004a7 f440      	BRSH _0x2000028
0004a8 940e 09f8 	CALL SUBOPT_0x21
0004aa 940e 0a09 	CALL SUBOPT_0x23
0004ac 940e 0a10 	CALL SUBOPT_0x24
0004ae 5031      	SUBI R19,LOW(1)
0004af cff5      	RJMP _0x2000026
                 _0x2000028:
0004b0 940e 09e5 	CALL SUBOPT_0x1F
                 _0x2000025:
                +
0004b2 85ec     +LDD R30 , Y + 12
0004b3 85fd     +LDD R31 , Y + 12 + 1
0004b4 856e     +LDD R22 , Y + 12 + 2
0004b5 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0004b6 940e 0a15 	CALL SUBOPT_0x25
0004b8 940e 0a10 	CALL SUBOPT_0x24
0004ba 940e 09ed 	CALL SUBOPT_0x20
0004bc f020      	BRLO _0x2000029
0004bd 940e 09f8 	CALL SUBOPT_0x21
0004bf 940e 09fd 	CALL SUBOPT_0x22
                 _0x2000029:
                 _0x2000020:
0004c1 e010      	LDI  R17,LOW(0)
                 _0x200002A:
0004c2 85eb      	LDD  R30,Y+11
0004c3 17e1      	CP   R30,R17
0004c4 f178      	BRLO _0x200002C
0004c5 940e 0994 	CALL SUBOPT_0x14
0004c7 940e 0a1c 	CALL SUBOPT_0x26
0004c9 940e 0a15 	CALL SUBOPT_0x25
0004cb 01df      	MOVW R26,R30
0004cc 01cb      	MOVW R24,R22
0004cd 940e 0900 	CALL _floor
0004cf 940e 09b6 	CALL SUBOPT_0x1A
0004d1 940e 09f8 	CALL SUBOPT_0x21
0004d3 940e 0c72 	CALL __DIVF21
0004d5 940e 0b61 	CALL __CFD1U
0004d7 2f0e      	MOV  R16,R30
0004d8 940e 0a23 	CALL SUBOPT_0x27
0004da 940e 0a2a 	CALL SUBOPT_0x28
0004dc 27ff      	CLR  R31
0004dd 2766      	CLR  R22
0004de 2777      	CLR  R23
0004df 940e 0b9a 	CALL __CDF1
0004e1 940e 0994 	CALL SUBOPT_0x14
0004e3 940e 0c24 	CALL __MULF12
0004e5 940e 09f8 	CALL SUBOPT_0x21
0004e7 940e 0a2f 	CALL SUBOPT_0x29
0004e9 940e 0a10 	CALL SUBOPT_0x24
0004eb 2fe1      	MOV  R30,R17
0004ec 5f1f      	SUBI R17,-1
0004ed 30e0      	CPI  R30,0
0004ee f699      	BRNE _0x200002A
0004ef 940e 0a23 	CALL SUBOPT_0x27
0004f1 e2ee      	LDI  R30,LOW(46)
0004f2 93ec      	ST   X,R30
0004f3 cfce      	RJMP _0x200002A
                 _0x200002C:
0004f4 940e 0a34 	CALL SUBOPT_0x2A
0004f6 9731      	SBIW R30,1
0004f7 85aa      	LDD  R26,Y+10
0004f8 83a0      	STD  Z+0,R26
0004f9 3030      	CPI  R19,0
0004fa f42c      	BRGE _0x200002E
0004fb 9531      	NEG  R19
0004fc 85a8      	LDD  R26,Y+8
0004fd 85b9      	LDD  R27,Y+8+1
0004fe e2ed      	LDI  R30,LOW(45)
0004ff c003      	RJMP _0x2000113
                 _0x200002E:
000500 85a8      	LDD  R26,Y+8
000501 85b9      	LDD  R27,Y+8+1
000502 e2eb      	LDI  R30,LOW(43)
                 _0x2000113:
000503 93ec      	ST   X,R30
000504 940e 0a34 	CALL SUBOPT_0x2A
000506 940e 0a34 	CALL SUBOPT_0x2A
000508 9731      	SBIW R30,1
000509 01bf      	MOVW R22,R30
00050a 2fa3      	MOV  R26,R19
00050b e0ea      	LDI  R30,LOW(10)
00050c 940e 0d4b 	CALL __DIVB21
00050e 5de0      	SUBI R30,-LOW(48)
00050f 01db      	MOVW R26,R22
000510 93ec      	ST   X,R30
000511 940e 0a34 	CALL SUBOPT_0x2A
000513 9731      	SBIW R30,1
000514 01bf      	MOVW R22,R30
000515 2fa3      	MOV  R26,R19
000516 e0ea      	LDI  R30,LOW(10)
000517 940e 0d7a 	CALL __MODB21
000519 5de0      	SUBI R30,-LOW(48)
00051a 01db      	MOVW R26,R22
00051b 93ec      	ST   X,R30
00051c 85a8      	LDD  R26,Y+8
00051d 85b9      	LDD  R27,Y+8+1
00051e e0e0      	LDI  R30,LOW(0)
00051f 93ec      	ST   X,R30
                 _0x20C0006:
000520 940e 0dff 	CALL __LOADLOCR4
000522 9660      	ADIW R28,16
000523 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000524 93ba      	ST   -Y,R27
000525 93aa      	ST   -Y,R26
000526 97ef      	SBIW R28,63
000527 9761      	SBIW R28,17
000528 940e 0df6 	CALL __SAVELOCR6
00052a e010      	LDI  R17,0
                +
00052b 01fe     +MOVW R30 , R28
00052c 5ae8     +SUBI R30 , LOW ( - 88 )
00052d 4fff     +SBCI R31 , HIGH ( - 88 )
00052e 9001     +LD R0 , Z +
00052f 81f0     +LD R31 , Z
000530 2de0     +MOV R30 , R0
                 	__GETW1SX 88
000531 87e8      	STD  Y+8,R30
000532 87f9      	STD  Y+8+1,R31
                +
000533 01fe     +MOVW R30 , R28
000534 5aea     +SUBI R30 , LOW ( - 86 )
000535 4fff     +SBCI R31 , HIGH ( - 86 )
000536 9001     +LD R0 , Z +
000537 81f0     +LD R31 , Z
000538 2de0     +MOV R30 , R0
                 	__GETW1SX 86
000539 83ee      	STD  Y+6,R30
00053a 83ff      	STD  Y+6+1,R31
00053b 81ae      	LDD  R26,Y+6
00053c 81bf      	LDD  R27,Y+6+1
00053d e0e0      	LDI  R30,LOW(0)
00053e e0f0      	LDI  R31,HIGH(0)
00053f 93ed      	ST   X+,R30
000540 93fc      	ST   X,R31
                 _0x2000030:
000541 01de      	MOVW R26,R28
000542 5aa4      	SUBI R26,LOW(-(92))
000543 4fbf      	SBCI R27,HIGH(-(92))
000544 940e 09d8 	CALL SUBOPT_0x1D
000546 9731      	SBIW R30,1
000547 91e4      	LPM  R30,Z
000548 2f2e      	MOV  R18,R30
000549 30e0      	CPI  R30,0
00054a f409      	BRNE PC+2
00054b c1e9      	RJMP _0x2000032
00054c 2fe1      	MOV  R30,R17
00054d 30e0      	CPI  R30,0
00054e f439      	BRNE _0x2000036
00054f 3225      	CPI  R18,37
000550 f411      	BRNE _0x2000037
000551 e011      	LDI  R17,LOW(1)
000552 c002      	RJMP _0x2000038
                 _0x2000037:
000553 940e 0a3a 	CALL SUBOPT_0x2B
                 _0x2000038:
000555 c1de      	RJMP _0x2000035
                 _0x2000036:
000556 30e1      	CPI  R30,LOW(0x1)
000557 f4c1      	BRNE _0x2000039
000558 3225      	CPI  R18,37
000559 f419      	BRNE _0x200003A
00055a 940e 0a3a 	CALL SUBOPT_0x2B
00055c c1d6      	RJMP _0x2000114
                 _0x200003A:
00055d e012      	LDI  R17,LOW(2)
00055e e0e0      	LDI  R30,LOW(0)
00055f 8bed      	STD  Y+21,R30
000560 e000      	LDI  R16,LOW(0)
000561 322d      	CPI  R18,45
000562 f411      	BRNE _0x200003B
000563 e001      	LDI  R16,LOW(1)
000564 c1cf      	RJMP _0x2000035
                 _0x200003B:
000565 322b      	CPI  R18,43
000566 f419      	BRNE _0x200003C
000567 e2eb      	LDI  R30,LOW(43)
000568 8bed      	STD  Y+21,R30
000569 c1ca      	RJMP _0x2000035
                 _0x200003C:
00056a 3220      	CPI  R18,32
00056b f419      	BRNE _0x200003D
00056c e2e0      	LDI  R30,LOW(32)
00056d 8bed      	STD  Y+21,R30
00056e c1c5      	RJMP _0x2000035
                 _0x200003D:
00056f c002      	RJMP _0x200003E
                 _0x2000039:
000570 30e2      	CPI  R30,LOW(0x2)
000571 f439      	BRNE _0x200003F
                 _0x200003E:
000572 e050      	LDI  R21,LOW(0)
000573 e013      	LDI  R17,LOW(3)
000574 3320      	CPI  R18,48
000575 f411      	BRNE _0x2000040
000576 6800      	ORI  R16,LOW(128)
000577 c1bc      	RJMP _0x2000035
                 _0x2000040:
000578 c002      	RJMP _0x2000041
                 _0x200003F:
000579 30e3      	CPI  R30,LOW(0x3)
00057a f491      	BRNE _0x2000042
                 _0x2000041:
00057b 3320      	CPI  R18,48
00057c f010      	BRLO _0x2000044
00057d 332a      	CPI  R18,58
00057e f008      	BRLO _0x2000045
                 _0x2000044:
00057f c007      	RJMP _0x2000043
                 _0x2000045:
000580 e0aa      	LDI  R26,LOW(10)
000581 9f5a      	MUL  R21,R26
000582 2d50      	MOV  R21,R0
000583 2fe2      	MOV  R30,R18
000584 53e0      	SUBI R30,LOW(48)
000585 0f5e      	ADD  R21,R30
000586 c1ad      	RJMP _0x2000035
                 _0x2000043:
000587 e040      	LDI  R20,LOW(0)
000588 322e      	CPI  R18,46
000589 f411      	BRNE _0x2000046
00058a e014      	LDI  R17,LOW(4)
00058b c1a8      	RJMP _0x2000035
                 _0x2000046:
00058c c00f      	RJMP _0x2000047
                 _0x2000042:
00058d 30e4      	CPI  R30,LOW(0x4)
00058e f499      	BRNE _0x2000049
00058f 3320      	CPI  R18,48
000590 f010      	BRLO _0x200004B
000591 332a      	CPI  R18,58
000592 f008      	BRLO _0x200004C
                 _0x200004B:
000593 c008      	RJMP _0x200004A
                 _0x200004C:
000594 6200      	ORI  R16,LOW(32)
000595 e0aa      	LDI  R26,LOW(10)
000596 9f4a      	MUL  R20,R26
000597 2d40      	MOV  R20,R0
000598 2fe2      	MOV  R30,R18
000599 53e0      	SUBI R30,LOW(48)
00059a 0f4e      	ADD  R20,R30
00059b c198      	RJMP _0x2000035
                 _0x200004A:
                 _0x2000047:
00059c 362c      	CPI  R18,108
00059d f419      	BRNE _0x200004D
00059e 6002      	ORI  R16,LOW(2)
00059f e015      	LDI  R17,LOW(5)
0005a0 c193      	RJMP _0x2000035
                 _0x200004D:
0005a1 c003      	RJMP _0x200004E
                 _0x2000049:
0005a2 30e5      	CPI  R30,LOW(0x5)
0005a3 f009      	BREQ PC+2
0005a4 c18f      	RJMP _0x2000035
                 _0x200004E:
0005a5 2fe2      	MOV  R30,R18
0005a6 36e3      	CPI  R30,LOW(0x63)
0005a7 f459      	BRNE _0x2000053
0005a8 940e 0a41 	CALL SUBOPT_0x2C
0005aa 940e 0a48 	CALL SUBOPT_0x2D
0005ac 940e 0a41 	CALL SUBOPT_0x2C
0005ae 81a4      	LDD  R26,Z+4
0005af 93aa      	ST   -Y,R26
0005b0 940e 0a4f 	CALL SUBOPT_0x2E
0005b2 c180      	RJMP _0x2000054
                 _0x2000053:
0005b3 34e5      	CPI  R30,LOW(0x45)
0005b4 f011      	BREQ _0x2000057
0005b5 36e5      	CPI  R30,LOW(0x65)
0005b6 f409      	BRNE _0x2000058
                 _0x2000057:
0005b7 c003      	RJMP _0x2000059
                 _0x2000058:
0005b8 36e6      	CPI  R30,LOW(0x66)
0005b9 f009      	BREQ PC+2
0005ba c048      	RJMP _0x200005A
                 _0x2000059:
0005bb 01fe      	MOVW R30,R28
0005bc 9676      	ADIW R30,22
0005bd 87ee      	STD  Y+14,R30
0005be 87ff      	STD  Y+14+1,R31
0005bf 940e 0a55 	CALL SUBOPT_0x2F
0005c1 940e 0dc1 	CALL __GETD1P
0005c3 940e 0a5c 	CALL SUBOPT_0x30
0005c5 940e 0a61 	CALL SUBOPT_0x31
0005c7 85ad      	LDD  R26,Y+13
0005c8 23aa      	TST  R26
0005c9 f032      	BRMI _0x200005B
0005ca 89ad      	LDD  R26,Y+21
0005cb 32ab      	CPI  R26,LOW(0x2B)
0005cc f059      	BREQ _0x200005D
0005cd 32a0      	CPI  R26,LOW(0x20)
0005ce f081      	BREQ _0x200005F
0005cf c017      	RJMP _0x2000060
                 _0x200005B:
0005d0 940e 0a63 	CALL SUBOPT_0x32
0005d2 940e 0b2e 	CALL __ANEGF1
0005d4 940e 0a5c 	CALL SUBOPT_0x30
0005d6 e2ed      	LDI  R30,LOW(45)
0005d7 8bed      	STD  Y+21,R30
                 _0x200005D:
0005d8 ff07      	SBRS R16,7
0005d9 c005      	RJMP _0x2000061
0005da 89ed      	LDD  R30,Y+21
0005db 93ea      	ST   -Y,R30
0005dc 940e 0a4f 	CALL SUBOPT_0x2E
0005de c008      	RJMP _0x2000062
                 _0x2000061:
                 _0x200005F:
0005df 85ee      	LDD  R30,Y+14
0005e0 85ff      	LDD  R31,Y+14+1
0005e1 9631      	ADIW R30,1
0005e2 87ee      	STD  Y+14,R30
0005e3 87ff      	STD  Y+14+1,R31
0005e4 9731      	SBIW R30,1
0005e5 89ad      	LDD  R26,Y+21
0005e6 83a0      	STD  Z+0,R26
                 _0x2000062:
                 _0x2000060:
0005e7 ff05      	SBRS R16,5
0005e8 e046      	LDI  R20,LOW(6)
0005e9 3626      	CPI  R18,102
0005ea f451      	BRNE _0x2000064
0005eb 940e 0a63 	CALL SUBOPT_0x32
0005ed 940e 0ddb 	CALL __PUTPARD1
0005ef 934a      	ST   -Y,R20
0005f0 89ab      	LDD  R26,Y+19
0005f1 89bc      	LDD  R27,Y+19+1
0005f2 940e 077c 	CALL _ftoa
0005f4 c009      	RJMP _0x2000065
                 _0x2000064:
0005f5 940e 0a63 	CALL SUBOPT_0x32
0005f7 940e 0ddb 	CALL __PUTPARD1
0005f9 934a      	ST   -Y,R20
0005fa 932a      	ST   -Y,R18
0005fb 89ac      	LDD  R26,Y+20
0005fc 89bd      	LDD  R27,Y+20+1
0005fd de5a      	RCALL __ftoe_G100
                 _0x2000065:
0005fe 01fe      	MOVW R30,R28
0005ff 9676      	ADIW R30,22
000600 940e 0a68 	CALL SUBOPT_0x33
000602 c01e      	RJMP _0x2000066
                 _0x200005A:
000603 37e3      	CPI  R30,LOW(0x73)
000604 f439      	BRNE _0x2000068
000605 940e 0a61 	CALL SUBOPT_0x31
000607 940e 0a70 	CALL SUBOPT_0x34
000609 940e 0a68 	CALL SUBOPT_0x33
00060b c00e      	RJMP _0x2000069
                 _0x2000068:
00060c 37e0      	CPI  R30,LOW(0x70)
00060d f4c1      	BRNE _0x200006B
00060e 940e 0a61 	CALL SUBOPT_0x31
000610 940e 0a70 	CALL SUBOPT_0x34
000612 87ee      	STD  Y+14,R30
000613 87ff      	STD  Y+14+1,R31
000614 85ae      	LDD  R26,Y+14
000615 85bf      	LDD  R27,Y+14+1
000616 940e 08c2 	CALL _strlenf
000618 2f1e      	MOV  R17,R30
000619 6008      	ORI  R16,LOW(8)
                 _0x2000069:
00061a 770f      	ANDI R16,LOW(127)
00061b 3040      	CPI  R20,0
00061c f011      	BREQ _0x200006D
00061d 1741      	CP   R20,R17
00061e f008      	BRLO _0x200006E
                 _0x200006D:
00061f c001      	RJMP _0x200006C
                 _0x200006E:
000620 2f14      	MOV  R17,R20
                 _0x200006C:
                 _0x2000066:
000621 e040      	LDI  R20,LOW(0)
000622 e0e0      	LDI  R30,LOW(0)
000623 8bec      	STD  Y+20,R30
000624 e030      	LDI  R19,LOW(0)
000625 c06d      	RJMP _0x200006F
                 _0x200006B:
000626 36e4      	CPI  R30,LOW(0x64)
000627 f011      	BREQ _0x2000072
000628 36e9      	CPI  R30,LOW(0x69)
000629 f411      	BRNE _0x2000073
                 _0x2000072:
00062a 6004      	ORI  R16,LOW(4)
00062b c002      	RJMP _0x2000074
                 _0x2000073:
00062c 37e5      	CPI  R30,LOW(0x75)
00062d f4a1      	BRNE _0x2000075
                 _0x2000074:
00062e e0ea      	LDI  R30,LOW(10)
00062f 8bec      	STD  Y+20,R30
000630 ff01      	SBRS R16,1
000631 c008      	RJMP _0x2000076
                +
000632 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
000633 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
000634 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
000635 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
000636 940e 0a75 	CALL SUBOPT_0x35
000638 e01a      	LDI  R17,LOW(10)
000639 c022      	RJMP _0x2000077
                 _0x2000076:
                +
00063a e1e0     +LDI R30 , LOW ( 0x2710 )
00063b e2f7     +LDI R31 , HIGH ( 0x2710 )
00063c e060     +LDI R22 , BYTE3 ( 0x2710 )
00063d e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
00063e 940e 0a75 	CALL SUBOPT_0x35
000640 e015      	LDI  R17,LOW(5)
000641 c01a      	RJMP _0x2000077
                 _0x2000075:
000642 35e8      	CPI  R30,LOW(0x58)
000643 f411      	BRNE _0x2000079
000644 6008      	ORI  R16,LOW(8)
000645 c003      	RJMP _0x200007A
                 _0x2000079:
000646 37e8      	CPI  R30,LOW(0x78)
000647 f009      	BREQ PC+2
000648 c0ea      	RJMP _0x20000B8
                 _0x200007A:
000649 e1e0      	LDI  R30,LOW(16)
00064a 8bec      	STD  Y+20,R30
00064b ff01      	SBRS R16,1
00064c c008      	RJMP _0x200007C
                +
00064d e0e0     +LDI R30 , LOW ( 0x10000000 )
00064e e0f0     +LDI R31 , HIGH ( 0x10000000 )
00064f e060     +LDI R22 , BYTE3 ( 0x10000000 )
000650 e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
000651 940e 0a75 	CALL SUBOPT_0x35
000653 e018      	LDI  R17,LOW(8)
000654 c007      	RJMP _0x2000077
                 _0x200007C:
                +
000655 e0e0     +LDI R30 , LOW ( 0x1000 )
000656 e1f0     +LDI R31 , HIGH ( 0x1000 )
000657 e060     +LDI R22 , BYTE3 ( 0x1000 )
000658 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
000659 940e 0a75 	CALL SUBOPT_0x35
00065b e014      	LDI  R17,LOW(4)
                 _0x2000077:
00065c 3040      	CPI  R20,0
00065d f011      	BREQ _0x200007D
00065e 770f      	ANDI R16,LOW(127)
00065f c001      	RJMP _0x200007E
                 _0x200007D:
000660 e041      	LDI  R20,LOW(1)
                 _0x200007E:
000661 ff01      	SBRS R16,1
000662 c008      	RJMP _0x200007F
000663 940e 0a61 	CALL SUBOPT_0x31
000665 940e 0a55 	CALL SUBOPT_0x2F
000667 9614      	ADIW R26,4
000668 940e 0dc1 	CALL __GETD1P
00066a c00f      	RJMP _0x2000115
                 _0x200007F:
00066b ff02      	SBRS R16,2
00066c c007      	RJMP _0x2000081
00066d 940e 0a61 	CALL SUBOPT_0x31
00066f 940e 0a70 	CALL SUBOPT_0x34
000671 940e 0d0e 	CALL __CWD1
000673 c006      	RJMP _0x2000115
                 _0x2000081:
000674 940e 0a61 	CALL SUBOPT_0x31
000676 940e 0a70 	CALL SUBOPT_0x34
000678 2766      	CLR  R22
000679 2777      	CLR  R23
                 _0x2000115:
                +
00067a 87ea     +STD Y + 10 , R30
00067b 87fb     +STD Y + 10 + 1 , R31
00067c 876c     +STD Y + 10 + 2 , R22
00067d 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00067e ff02      	SBRS R16,2
00067f c012      	RJMP _0x2000083
000680 85ad      	LDD  R26,Y+13
000681 23aa      	TST  R26
000682 f442      	BRPL _0x2000084
000683 940e 0a63 	CALL SUBOPT_0x32
000685 940e 0cef 	CALL __ANEGD1
000687 940e 0a5c 	CALL SUBOPT_0x30
000689 e2ed      	LDI  R30,LOW(45)
00068a 8bed      	STD  Y+21,R30
                 _0x2000084:
00068b 89ed      	LDD  R30,Y+21
00068c 30e0      	CPI  R30,0
00068d f019      	BREQ _0x2000085
00068e 5f1f      	SUBI R17,-LOW(1)
00068f 5f4f      	SUBI R20,-LOW(1)
000690 c001      	RJMP _0x2000086
                 _0x2000085:
000691 7f0b      	ANDI R16,LOW(251)
                 _0x2000086:
                 _0x2000083:
000692 2f34      	MOV  R19,R20
                 _0x200006F:
000693 fd00      	SBRC R16,0
000694 c014      	RJMP _0x2000087
                 _0x2000088:
000695 1715      	CP   R17,R21
000696 f410      	BRSH _0x200008B
000697 1735      	CP   R19,R21
000698 f008      	BRLO _0x200008C
                 _0x200008B:
000699 c00f      	RJMP _0x200008A
                 _0x200008C:
00069a ff07      	SBRS R16,7
00069b c008      	RJMP _0x200008D
00069c ff02      	SBRS R16,2
00069d c004      	RJMP _0x200008E
00069e 7f0b      	ANDI R16,LOW(251)
00069f 892d      	LDD  R18,Y+21
0006a0 5011      	SUBI R17,LOW(1)
0006a1 c001      	RJMP _0x200008F
                 _0x200008E:
0006a2 e320      	LDI  R18,LOW(48)
                 _0x200008F:
0006a3 c001      	RJMP _0x2000090
                 _0x200008D:
0006a4 e220      	LDI  R18,LOW(32)
                 _0x2000090:
0006a5 940e 0a3a 	CALL SUBOPT_0x2B
0006a7 5051      	SUBI R21,LOW(1)
0006a8 cfec      	RJMP _0x2000088
                 _0x200008A:
                 _0x2000087:
                 _0x2000091:
0006a9 1714      	CP   R17,R20
0006aa f490      	BRSH _0x2000093
0006ab 6100      	ORI  R16,LOW(16)
0006ac ff02      	SBRS R16,2
0006ad c006      	RJMP _0x2000094
0006ae 940e 0a7a 	CALL SUBOPT_0x36
0006b0 f009      	BREQ _0x2000095
0006b1 5051      	SUBI R21,LOW(1)
                 _0x2000095:
0006b2 5011      	SUBI R17,LOW(1)
0006b3 5041      	SUBI R20,LOW(1)
                 _0x2000094:
0006b4 e3e0      	LDI  R30,LOW(48)
0006b5 93ea      	ST   -Y,R30
0006b6 940e 0a4f 	CALL SUBOPT_0x2E
0006b8 3050      	CPI  R21,0
0006b9 f009      	BREQ _0x2000096
0006ba 5051      	SUBI R21,LOW(1)
                 _0x2000096:
0006bb 5041      	SUBI R20,LOW(1)
0006bc cfec      	RJMP _0x2000091
                 _0x2000093:
0006bd 2f31      	MOV  R19,R17
0006be 89ec      	LDD  R30,Y+20
0006bf 30e0      	CPI  R30,0
0006c0 f4b9      	BRNE _0x2000097
                 _0x2000098:
0006c1 3030      	CPI  R19,0
0006c2 f0a1      	BREQ _0x200009A
0006c3 ff03      	SBRS R16,3
0006c4 c006      	RJMP _0x200009B
0006c5 85ee      	LDD  R30,Y+14
0006c6 85ff      	LDD  R31,Y+14+1
0006c7 9125      	LPM  R18,Z+
0006c8 87ee      	STD  Y+14,R30
0006c9 87ff      	STD  Y+14+1,R31
0006ca c005      	RJMP _0x200009C
                 _0x200009B:
0006cb 85ae      	LDD  R26,Y+14
0006cc 85bf      	LDD  R27,Y+14+1
0006cd 912d      	LD   R18,X+
0006ce 87ae      	STD  Y+14,R26
0006cf 87bf      	STD  Y+14+1,R27
                 _0x200009C:
0006d0 940e 0a3a 	CALL SUBOPT_0x2B
0006d2 3050      	CPI  R21,0
0006d3 f009      	BREQ _0x200009D
0006d4 5051      	SUBI R21,LOW(1)
                 _0x200009D:
0006d5 5031      	SUBI R19,LOW(1)
0006d6 cfea      	RJMP _0x2000098
                 _0x200009A:
0006d7 c051      	RJMP _0x200009E
                 _0x2000097:
                 _0x20000A0:
0006d8 940e 0a8c 	CALL SUBOPT_0x37
0006da 940e 0d50 	CALL __DIVD21U
0006dc 2f2e      	MOV  R18,R30
0006dd 302a      	CPI  R18,10
0006de f030      	BRLO _0x20000A2
0006df ff03      	SBRS R16,3
0006e0 c002      	RJMP _0x20000A3
0006e1 5c29      	SUBI R18,-LOW(55)
0006e2 c001      	RJMP _0x20000A4
                 _0x20000A3:
0006e3 5a29      	SUBI R18,-LOW(87)
                 _0x20000A4:
0006e4 c001      	RJMP _0x20000A5
                 _0x20000A2:
0006e5 5d20      	SUBI R18,-LOW(48)
                 _0x20000A5:
0006e6 fd04      	SBRC R16,4
0006e7 c021      	RJMP _0x20000A7
0006e8 3321      	CPI  R18,49
0006e9 f460      	BRSH _0x20000A9
                +
0006ea 89a8     +LDD R26 , Y + 16
0006eb 89b9     +LDD R27 , Y + 16 + 1
0006ec 898a     +LDD R24 , Y + 16 + 2
0006ed 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0006ee 30a1     +CPI R26 , LOW ( 0x1 )
0006ef e0e0     +LDI R30 , HIGH ( 0x1 )
0006f0 07be     +CPC R27 , R30
0006f1 e0e0     +LDI R30 , BYTE3 ( 0x1 )
0006f2 078e     +CPC R24 , R30
0006f3 e0e0     +LDI R30 , BYTE4 ( 0x1 )
0006f4 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0006f5 f409      	BRNE _0x20000A8
                 _0x20000A9:
0006f6 c00b      	RJMP _0x20000AB
                 _0x20000A8:
0006f7 1743      	CP   R20,R19
0006f8 f440      	BRSH _0x2000116
0006f9 1753      	CP   R21,R19
0006fa f010      	BRLO _0x20000AE
0006fb ff00      	SBRS R16,0
0006fc c001      	RJMP _0x20000AF
                 _0x20000AE:
0006fd c010      	RJMP _0x20000AD
                 _0x20000AF:
0006fe e220      	LDI  R18,LOW(32)
0006ff ff07      	SBRS R16,7
000700 c008      	RJMP _0x20000B0
                 _0x2000116:
000701 e320      	LDI  R18,LOW(48)
                 _0x20000AB:
000702 6100      	ORI  R16,LOW(16)
000703 ff02      	SBRS R16,2
000704 c004      	RJMP _0x20000B1
000705 940e 0a7a 	CALL SUBOPT_0x36
000707 f009      	BREQ _0x20000B2
000708 5051      	SUBI R21,LOW(1)
                 _0x20000B2:
                 _0x20000B1:
                 _0x20000B0:
                 _0x20000A7:
000709 940e 0a3a 	CALL SUBOPT_0x2B
00070b 3050      	CPI  R21,0
00070c f009      	BREQ _0x20000B3
00070d 5051      	SUBI R21,LOW(1)
                 _0x20000B3:
                 _0x20000AD:
00070e 5031      	SUBI R19,LOW(1)
00070f 940e 0a8c 	CALL SUBOPT_0x37
000711 940e 0d86 	CALL __MODD21U
000713 940e 0a5c 	CALL SUBOPT_0x30
000715 89ec      	LDD  R30,Y+20
                +
000716 89a8     +LDD R26 , Y + 16
000717 89b9     +LDD R27 , Y + 16 + 1
000718 898a     +LDD R24 , Y + 16 + 2
000719 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
00071a 27ff      	CLR  R31
00071b 2766      	CLR  R22
00071c 2777      	CLR  R23
00071d 940e 0d50 	CALL __DIVD21U
00071f 940e 0a75 	CALL SUBOPT_0x35
                +
000721 89e8     +LDD R30 , Y + 16
000722 89f9     +LDD R31 , Y + 16 + 1
000723 896a     +LDD R22 , Y + 16 + 2
000724 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
000725 940e 0df2 	CALL __CPD10
000727 f009      	BREQ _0x20000A1
000728 cfaf      	RJMP _0x20000A0
                 _0x20000A1:
                 _0x200009E:
000729 ff00      	SBRS R16,0
00072a c008      	RJMP _0x20000B4
                 _0x20000B5:
00072b 3050      	CPI  R21,0
00072c f031      	BREQ _0x20000B7
00072d 5051      	SUBI R21,LOW(1)
00072e e2e0      	LDI  R30,LOW(32)
00072f 93ea      	ST   -Y,R30
000730 940e 0a4f 	CALL SUBOPT_0x2E
000732 cff8      	RJMP _0x20000B5
                 _0x20000B7:
                 _0x20000B4:
                 _0x20000B8:
                 _0x2000054:
                 _0x2000114:
000733 e010      	LDI  R17,LOW(0)
                 _0x2000035:
000734 ce0c      	RJMP _0x2000030
                 _0x2000032:
000735 81ae      	LDD  R26,Y+6
000736 81bf      	LDD  R27,Y+6+1
000737 940e 0dbd 	CALL __GETW1P
000739 940e 0dfd 	CALL __LOADLOCR6
00073b 96ef      	ADIW R28,63
00073c 966f      	ADIW R28,31
00073d 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00073e 92ff      	PUSH R15
00073f 2ef8      	MOV  R15,R24
000740 9726      	SBIW R28,6
000741 940e 0df8 	CALL __SAVELOCR4
000743 940e 0a95 	CALL SUBOPT_0x38
000745 9730      	SBIW R30,0
000746 f419      	BRNE _0x20000B9
000747 efef      	LDI  R30,LOW(65535)
000748 efff      	LDI  R31,HIGH(65535)
000749 c023      	RJMP _0x20C0005
                 _0x20000B9:
00074a 01de      	MOVW R26,R28
00074b 9616      	ADIW R26,6
00074c 940e 0cd7 	CALL __ADDW2R15
00074e 018d      	MOVW R16,R26
00074f 940e 0a95 	CALL SUBOPT_0x38
000751 83ee      	STD  Y+6,R30
000752 83ff      	STD  Y+6+1,R31
000753 e0e0      	LDI  R30,LOW(0)
000754 87e8      	STD  Y+8,R30
000755 87e9      	STD  Y+8+1,R30
000756 01de      	MOVW R26,R28
000757 961a      	ADIW R26,10
000758 940e 0cd7 	CALL __ADDW2R15
00075a 940e 0dbd 	CALL __GETW1P
00075c 93fa      	ST   -Y,R31
00075d 93ea      	ST   -Y,R30
00075e 931a      	ST   -Y,R17
00075f 930a      	ST   -Y,R16
000760 e1ee      	LDI  R30,LOW(_put_buff_G100)
000761 e0f4      	LDI  R31,HIGH(_put_buff_G100)
000762 93fa      	ST   -Y,R31
000763 93ea      	ST   -Y,R30
000764 01de      	MOVW R26,R28
000765 961a      	ADIW R26,10
000766 ddbd      	RCALL __print_G100
000767 019f      	MOVW R18,R30
000768 81ae      	LDD  R26,Y+6
000769 81bf      	LDD  R27,Y+6+1
00076a e0e0      	LDI  R30,LOW(0)
00076b 93ec      	ST   X,R30
00076c 01f9      	MOVW R30,R18
                 _0x20C0005:
00076d 940e 0dff 	CALL __LOADLOCR4
00076f 962a      	ADIW R28,10
000770 90ff      	POP  R15
000771 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
000772 93ba      	ST   -Y,R27
000773 93aa      	ST   -Y,R26
000774 91e9          ld   r30,y+
000775 91f9          ld   r31,y+
000776 9730          sbiw r30,0
000777 f41a          brpl __abs0
000778 95e0          com  r30
000779 95f0          com  r31
00077a 9631          adiw r30,1
                 __abs0:
00077b 9508          ret
                 ; .FEND
                 _ftoa:
                 ; .FSTART _ftoa
00077c 940e 09de 	CALL SUBOPT_0x1E
00077e e0e0      	LDI  R30,LOW(0)
00077f 83ea      	STD  Y+2,R30
000780 e3ef      	LDI  R30,LOW(63)
000781 83eb      	STD  Y+3,R30
000782 931a      	ST   -Y,R17
000783 930a      	ST   -Y,R16
000784 85eb      	LDD  R30,Y+11
000785 85fc      	LDD  R31,Y+11+1
000786 3fef      	CPI  R30,LOW(0xFFFF)
000787 efaf      	LDI  R26,HIGH(0xFFFF)
000788 07fa      	CPC  R31,R26
000789 f439      	BRNE _0x202000D
00078a 940e 0a9c 	CALL SUBOPT_0x39
                +
00078c e8a6     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
00078d e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
00078e 940e 08a9 	CALL _strcpyf
000790 c0ad      	RJMP _0x20C0004
                 _0x202000D:
000791 3fef      	CPI  R30,LOW(0x7FFF)
000792 e7af      	LDI  R26,HIGH(0x7FFF)
000793 07fa      	CPC  R31,R26
000794 f439      	BRNE _0x202000C
000795 940e 0a9c 	CALL SUBOPT_0x39
                +
000797 e8a7     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
000798 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
000799 940e 08a9 	CALL _strcpyf
00079b c0a2      	RJMP _0x20C0004
                 _0x202000C:
00079c 85ac      	LDD  R26,Y+12
00079d 23aa      	TST  R26
00079e f462      	BRPL _0x202000F
                +
00079f 85e9     +LDD R30 , Y + 9
0007a0 85fa     +LDD R31 , Y + 9 + 1
0007a1 856b     +LDD R22 , Y + 9 + 2
0007a2 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0007a3 940e 0b2e 	CALL __ANEGF1
0007a5 940e 0aa1 	CALL SUBOPT_0x3A
0007a7 940e 0aa6 	CALL SUBOPT_0x3B
0007a9 e2ed      	LDI  R30,LOW(45)
0007aa 93ec      	ST   X,R30
                 _0x202000F:
0007ab 85a8      	LDD  R26,Y+8
0007ac 30a7      	CPI  R26,LOW(0x7)
0007ad f010      	BRLO _0x2020010
0007ae e0e6      	LDI  R30,LOW(6)
0007af 87e8      	STD  Y+8,R30
                 _0x2020010:
0007b0 8518      	LDD  R17,Y+8
                 _0x2020011:
0007b1 2fe1      	MOV  R30,R17
0007b2 5011      	SUBI R17,1
0007b3 30e0      	CPI  R30,0
0007b4 f039      	BREQ _0x2020013
0007b5 940e 0aad 	CALL SUBOPT_0x3C
0007b7 940e 0a1c 	CALL SUBOPT_0x26
0007b9 940e 0ab2 	CALL SUBOPT_0x3D
0007bb cff5      	RJMP _0x2020011
                 _0x2020013:
0007bc 940e 0ab7 	CALL SUBOPT_0x3E
0007be 940e 0bd4 	CALL __ADDF12
0007c0 940e 0aa1 	CALL SUBOPT_0x3A
0007c2 e010      	LDI  R17,LOW(0)
                +
0007c3 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0007c4 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0007c5 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0007c6 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0007c7 940e 0ab2 	CALL SUBOPT_0x3D
                 _0x2020014:
0007c9 940e 0ab7 	CALL SUBOPT_0x3E
0007cb 940e 0cb7 	CALL __CMPF12
0007cd f088      	BRLO _0x2020016
0007ce 940e 0aad 	CALL SUBOPT_0x3C
0007d0 940e 0a09 	CALL SUBOPT_0x23
0007d2 940e 0ab2 	CALL SUBOPT_0x3D
0007d4 5f1f      	SUBI R17,-LOW(1)
0007d5 3217      	CPI  R17,39
0007d6 f038      	BRLO _0x2020017
0007d7 940e 0a9c 	CALL SUBOPT_0x39
                +
0007d9 e8ab     +LDI R26 , LOW ( 2 * _0x2020000 + ( 5 ) )
0007da e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 5 ) )
                 	__POINTW2FN _0x2020000,5
0007db 940e 08a9 	CALL _strcpyf
0007dd c060      	RJMP _0x20C0004
                 _0x2020017:
0007de cfea      	RJMP _0x2020014
                 _0x2020016:
0007df 3010      	CPI  R17,0
0007e0 f429      	BRNE _0x2020018
0007e1 940e 0aa6 	CALL SUBOPT_0x3B
0007e3 e3e0      	LDI  R30,LOW(48)
0007e4 93ec      	ST   X,R30
0007e5 c02b      	RJMP _0x2020019
                 _0x2020018:
                 _0x202001A:
0007e6 2fe1      	MOV  R30,R17
0007e7 5011      	SUBI R17,1
0007e8 30e0      	CPI  R30,0
0007e9 f139      	BREQ _0x202001C
0007ea 940e 0aad 	CALL SUBOPT_0x3C
0007ec 940e 0a1c 	CALL SUBOPT_0x26
0007ee 940e 0a15 	CALL SUBOPT_0x25
0007f0 01df      	MOVW R26,R30
0007f1 01cb      	MOVW R24,R22
0007f2 940e 0900 	CALL _floor
0007f4 940e 0ab2 	CALL SUBOPT_0x3D
0007f6 940e 0ab7 	CALL SUBOPT_0x3E
0007f8 940e 0c72 	CALL __DIVF21
0007fa 940e 0b61 	CALL __CFD1U
0007fc 2f0e      	MOV  R16,R30
0007fd 940e 0aa6 	CALL SUBOPT_0x3B
0007ff 940e 0a2a 	CALL SUBOPT_0x28
000801 e0f0      	LDI  R31,0
000802 940e 0aad 	CALL SUBOPT_0x3C
000804 940e 0d0e 	CALL __CWD1
000806 940e 0b9a 	CALL __CDF1
000808 940e 0c24 	CALL __MULF12
00080a 940e 0ac0 	CALL SUBOPT_0x3F
00080c 940e 0a2f 	CALL SUBOPT_0x29
00080e 940e 0aa1 	CALL SUBOPT_0x3A
000810 cfd5      	RJMP _0x202001A
                 _0x202001C:
                 _0x2020019:
000811 85e8      	LDD  R30,Y+8
000812 30e0      	CPI  R30,0
000813 f131      	BREQ _0x20C0003
000814 940e 0aa6 	CALL SUBOPT_0x3B
000816 e2ee      	LDI  R30,LOW(46)
000817 93ec      	ST   X,R30
                 _0x202001E:
000818 85e8      	LDD  R30,Y+8
000819 50e1      	SUBI R30,LOW(1)
00081a 87e8      	STD  Y+8,R30
00081b 5fef      	SUBI R30,-LOW(1)
00081c f0e9      	BREQ _0x2020020
00081d 940e 0ac0 	CALL SUBOPT_0x3F
00081f 940e 0a09 	CALL SUBOPT_0x23
000821 940e 0aa1 	CALL SUBOPT_0x3A
                +
000823 85e9     +LDD R30 , Y + 9
000824 85fa     +LDD R31 , Y + 9 + 1
000825 856b     +LDD R22 , Y + 9 + 2
000826 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000827 940e 0b61 	CALL __CFD1U
000829 2f0e      	MOV  R16,R30
00082a 940e 0aa6 	CALL SUBOPT_0x3B
00082c 940e 0a2a 	CALL SUBOPT_0x28
00082e e0f0      	LDI  R31,0
00082f 940e 0ac0 	CALL SUBOPT_0x3F
000831 940e 0d0e 	CALL __CWD1
000833 940e 0b9a 	CALL __CDF1
000835 940e 0a2f 	CALL SUBOPT_0x29
000837 940e 0aa1 	CALL SUBOPT_0x3A
000839 cfde      	RJMP _0x202001E
                 _0x2020020:
                 _0x20C0003:
00083a 81ae      	LDD  R26,Y+6
00083b 81bf      	LDD  R27,Y+6+1
00083c e0e0      	LDI  R30,LOW(0)
00083d 93ec      	ST   X,R30
                 _0x20C0004:
00083e 8119      	LDD  R17,Y+1
00083f 8108      	LDD  R16,Y+0
000840 962d      	ADIW R28,13
000841 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
000842 93aa      	ST   -Y,R26
000843 b3e8      	IN   R30,0x18
000844 70ef      	ANDI R30,LOW(0xF)
000845 2fae      	MOV  R26,R30
000846 81e8      	LD   R30,Y
000847 7fe0      	ANDI R30,LOW(0xF0)
000848 2bea      	OR   R30,R26
000849 bbe8      	OUT  0x18,R30
                +
00084a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00084b 958a     +DEC R24
00084c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00084d 9ac2      	SBI  0x18,2
                +
00084e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00084f 958a     +DEC R24
000850 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000851 98c2      	CBI  0x18,2
                +
000852 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000853 958a     +DEC R24
000854 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000855 c051      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000856 93aa      	ST   -Y,R26
000857 81a8      	LD   R26,Y
000858 dfe9      	RCALL __lcd_write_nibble_G102
000859 81e8          ld    r30,y
00085a 95e2          swap  r30
00085b 83e8          st    y,r30
00085c 81a8      	LD   R26,Y
00085d dfe4      	RCALL __lcd_write_nibble_G102
                +
00085e e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00085f 958a     +DEC R24
000860 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000861 c045      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000862 93aa      	ST   -Y,R26
000863 81e8      	LD   R30,Y
000864 e0f0      	LDI  R31,0
000865 55ec      	SUBI R30,LOW(-__base_y_G102)
000866 4ffd      	SBCI R31,HIGH(-__base_y_G102)
000867 81e0      	LD   R30,Z
000868 81a9      	LDD  R26,Y+1
000869 0fae      	ADD  R26,R30
00086a dfeb      	RCALL __lcd_write_data
00086b 8079      	LDD  R7,Y+1
00086c 8068      	LDD  R6,Y+0
00086d 9622      	ADIW R28,2
00086e 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00086f e0a2      	LDI  R26,LOW(2)
000870 940e 0ac5 	CALL SUBOPT_0x40
000872 e0ac      	LDI  R26,LOW(12)
000873 dfe2      	RCALL __lcd_write_data
000874 e0a1      	LDI  R26,LOW(1)
000875 940e 0ac5 	CALL SUBOPT_0x40
000877 e0e0      	LDI  R30,LOW(0)
000878 2e6e      	MOV  R6,R30
000879 2e7e      	MOV  R7,R30
00087a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00087b 93aa      	ST   -Y,R26
00087c b3e7      	IN   R30,0x17
00087d 6fe0      	ORI  R30,LOW(0xF0)
00087e bbe7      	OUT  0x17,R30
00087f 9aba      	SBI  0x17,2
000880 9ab8      	SBI  0x17,0
000881 9ab9      	SBI  0x17,1
000882 98c2      	CBI  0x18,2
000883 98c0      	CBI  0x18,0
000884 98c1      	CBI  0x18,1
000885 8098      	LDD  R9,Y+0
000886 81e8      	LD   R30,Y
000887 58e0      	SUBI R30,-LOW(128)
                +
000888 93e0 02a6+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
00088a 81e8      	LD   R30,Y
00088b 54e0      	SUBI R30,-LOW(192)
                +
00088c 93e0 02a7+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
00088e e1a4      	LDI  R26,LOW(20)
00088f e0b0      	LDI  R27,0
000890 940e 0b24 	CALL _delay_ms
000892 940e 0acb 	CALL SUBOPT_0x41
000894 940e 0acb 	CALL SUBOPT_0x41
000896 940e 0acb 	CALL SUBOPT_0x41
000898 e2a0      	LDI  R26,LOW(32)
000899 dfa8      	RCALL __lcd_write_nibble_G102
                +
00089a ec88     +LDI R24 , LOW ( 200 )
00089b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00089c 9701     +SBIW R24 , 1
00089d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00089e e2a8      	LDI  R26,LOW(40)
00089f dfb6      	RCALL __lcd_write_data
0008a0 e0a4      	LDI  R26,LOW(4)
0008a1 dfb4      	RCALL __lcd_write_data
0008a2 e8a5      	LDI  R26,LOW(133)
0008a3 dfb2      	RCALL __lcd_write_data
0008a4 e0a6      	LDI  R26,LOW(6)
0008a5 dfb0      	RCALL __lcd_write_data
0008a6 dfc8      	RCALL _lcd_clear
                 _0x20C0002:
0008a7 9621      	ADIW R28,1
0008a8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
0008a9 93ba      	ST   -Y,R27
0008aa 93aa      	ST   -Y,R26
0008ab 91e9          ld   r30,y+
0008ac 91f9          ld   r31,y+
0008ad 91a9          ld   r26,y+
0008ae 91b9          ld   r27,y+
0008af 01cd          movw r24,r26
                 strcpyf0:
0008b0 9005      	lpm  r0,z+
0008b1 920d          st   x+,r0
0008b2 2000          tst  r0
0008b3 f7e1          brne strcpyf0
0008b4 01fc          movw r30,r24
0008b5 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
0008b6 93ba      	ST   -Y,R27
0008b7 93aa      	ST   -Y,R26
0008b8 91a9          ld   r26,y+
0008b9 91b9          ld   r27,y+
0008ba 27ee          clr  r30
0008bb 27ff          clr  r31
                 strlen0:
0008bc 916d          ld   r22,x+
0008bd 2366          tst  r22
0008be f011          breq strlen1
0008bf 9631          adiw r30,1
0008c0 cffb          rjmp strlen0
                 strlen1:
0008c1 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0008c2 93ba      	ST   -Y,R27
0008c3 93aa      	ST   -Y,R26
0008c4 27aa          clr  r26
0008c5 27bb          clr  r27
0008c6 91e9          ld   r30,y+
0008c7 91f9          ld   r31,y+
                 strlenf0:
0008c8 9005      	lpm  r0,z+
0008c9 2000          tst  r0
0008ca f011          breq strlenf1
0008cb 9611          adiw r26,1
0008cc cffb          rjmp strlenf0
                 strlenf1:
0008cd 01fd          movw r30,r26
0008ce 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0008cf 940e 0de0 	CALL __PUTPARD2
0008d1 817b         ldd  r23,y+3
0008d2 816a         ldd  r22,y+2
0008d3 81f9         ldd  r31,y+1
0008d4 81e8         ld   r30,y
0008d5 fb77         bst  r23,7
0008d6 0f77         lsl  r23
0008d7 fd67         sbrc r22,7
0008d8 6071         sbr  r23,1
0008d9 2f97         mov  r25,r23
0008da 579e         subi r25,0x7e
0008db f081         breq __ftrunc0
0008dc f078         brcs __ftrunc0
0008dd 3198         cpi  r25,24
0008de f490         brsh __ftrunc1
0008df 27aa         clr  r26
0008e0 27bb         clr  r27
0008e1 2788         clr  r24
                 __ftrunc2:
0008e2 9408         sec
0008e3 9587         ror  r24
0008e4 95b7         ror  r27
0008e5 95a7         ror  r26
0008e6 959a         dec  r25
0008e7 f7d1         brne __ftrunc2
0008e8 23ea         and  r30,r26
0008e9 23fb         and  r31,r27
0008ea 2368         and  r22,r24
0008eb c005         rjmp __ftrunc1
                 __ftrunc0:
0008ec 94e8         clt
0008ed 2777         clr  r23
0008ee 27ee         clr  r30
0008ef 27ff         clr  r31
0008f0 2766         clr  r22
                 __ftrunc1:
0008f1 776f         cbr  r22,0x80
0008f2 9576         lsr  r23
0008f3 f408         brcc __ftrunc3
0008f4 6860         sbr  r22,0x80
                 __ftrunc3:
0008f5 f977         bld  r23,7
0008f6 91a9         ld   r26,y+
0008f7 91b9         ld   r27,y+
0008f8 9189         ld   r24,y+
0008f9 9199         ld   r25,y+
0008fa 17ea         cp   r30,r26
0008fb 07fb         cpc  r31,r27
0008fc 0768         cpc  r22,r24
0008fd 0779         cpc  r23,r25
0008fe fb97         bst  r25,7
0008ff 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000900 940e 0de0 	CALL __PUTPARD2
000902 d0a8      	RCALL SUBOPT_0x18
000903 940e 08cf 	CALL _ftrunc
000905 d06a      	RCALL SUBOPT_0xD
000906 f411          brne __floor1
                 __floor0:
000907 d06b      	RCALL SUBOPT_0xE
000908 c008      	RJMP _0x20C0001
                 __floor1:
000909 f7ee          brtc __floor0
00090a d068      	RCALL SUBOPT_0xE
                +
00090b e0a0     +LDI R26 , LOW ( 0x3F800000 )
00090c e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00090d e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00090e e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00090f 940e 0bcd 	CALL __SUBF12
                 _0x20C0001:
000911 9624      	ADIW R28,4
000912 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _adc_T:
000260           	.BYTE 0x4
                 _adc_P:
000264           	.BYTE 0x4
                 _t_fine:
000268           	.BYTE 0x4
                 _BMP280_calib:
00026c           	.BYTE 0x18
                 _lcd:
000284           	.BYTE 0x10
                 _temperature:
000294           	.BYTE 0x4
                 _pressure:
000298           	.BYTE 0x4
                 _i:
00029c           	.BYTE 0x4
                 __seed_G101:
0002a0           	.BYTE 0x4
                 __base_y_G102:
0002a4           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000913 940e 0ad8 	CALL _i2c_start
000915 eeac      	LDI  R26,LOW(236)
000916 940e 0b0c 	CALL _i2c_write
000918 81a9      	LDD  R26,Y+1
000919 940c 0b0c 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00091b 940e 0ad8 	CALL _i2c_start
00091d eead      	LDI  R26,LOW(237)
00091e 940c 0b0c 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000920 e0a1      	LDI  R26,LOW(1)
000921 940e 0af1 	CALL _i2c_read
000923 83ea      	STD  Y+2,R30
000924 e0a1      	LDI  R26,LOW(1)
000925 940e 0af1 	CALL _i2c_read
000927 83e9      	STD  Y+1,R30
000928 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
000929 940e 0dd1 	CALL __GETD2S0
00092b e0e4      	LDI  R30,LOW(4)
00092c 940e 0cf7 	CALL __LSRD12
                +
00092e 7fef     +ANDI R30 , LOW ( 0xFFFFF )
00092f 7fff     +ANDI R31 , HIGH ( 0xFFFFF )
000930 706f     +ANDI R22 , BYTE3 ( 0xFFFFF )
000931 7070     +ANDI R23 , BYTE4 ( 0xFFFFF )
                 	__ANDD1N 0xFFFFF
000932 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000933 91a0 0260 	LDS  R26,_adc_T
000935 91b0 0261 	LDS  R27,_adc_T+1
000937 9180 0262 	LDS  R24,_adc_T+2
000939 9190 0263 	LDS  R25,_adc_T+3
00093b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
                +
00093c e0e8     +LDI R30 , LOW ( 0x8 )
00093d e0f0     +LDI R31 , HIGH ( 0x8 )
00093e e060     +LDI R22 , BYTE3 ( 0x8 )
00093f e070     +LDI R23 , BYTE4 ( 0x8 )
                 	__GETD1N 0x8
000940 940e 0d75 	CALL __DIVD21
000942 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
                +
000943 e0e2     +LDI R30 , LOW ( 0x2 )
000944 e0f0     +LDI R31 , HIGH ( 0x2 )
000945 e060     +LDI R22 , BYTE3 ( 0x2 )
000946 e070     +LDI R23 , BYTE4 ( 0x2 )
                 	__GETD1N 0x2
000947 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000948 940e 0d0e 	CALL __CWD1
00094a 940e 0d38 	CALL __MULD12
00094c 01df      	MOVW R26,R30
00094d 01cb      	MOVW R24,R22
00094e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
                +
00094f e0e0     +LDI R30 , LOW ( 0x800 )
000950 e0f8     +LDI R31 , HIGH ( 0x800 )
000951 e060     +LDI R22 , BYTE3 ( 0x800 )
000952 e070     +LDI R23 , BYTE4 ( 0x800 )
                 	__GETD1N 0x800
000953 940e 0d75 	CALL __DIVD21
000955 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x9:
                +
000956 83ec     +STD Y + 4 , R30
000957 83fd     +STD Y + 4 + 1 , R31
000958 836e     +STD Y + 4 + 2 , R22
000959 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
00095a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
                +
00095b e1e0     +LDI R30 , LOW ( 0x10 )
00095c e0f0     +LDI R31 , HIGH ( 0x10 )
00095d e060     +LDI R22 , BYTE3 ( 0x10 )
00095e e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
00095f 940e 0d75 	CALL __DIVD21
000961 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000962 01df      	MOVW R26,R30
000963 01cb      	MOVW R24,R22
000964 940e 0d38 	CALL __MULD12
000966 01df      	MOVW R26,R30
000967 01cb      	MOVW R24,R22
000968 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
                +
000969 e0e0     +LDI R30 , LOW ( 0x1000 )
00096a e1f0     +LDI R31 , HIGH ( 0x1000 )
00096b e060     +LDI R22 , BYTE3 ( 0x1000 )
00096c e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
00096d 940e 0d75 	CALL __DIVD21
00096f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000970 940e 0dd6 	CALL __PUTD1S0
000972 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xE:
000973 940e 0dcc 	CALL __GETD1S0
000975 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
000976 81ac     +LDD R26 , Y + 4
000977 81bd     +LDD R27 , Y + 4 + 1
000978 818e     +LDD R24 , Y + 4 + 2
000979 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00097a 940e 0cdb 	CALL __ADDD12
00097c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
                +
00097d 87e8     +STD Y + 8 , R30
00097e 87f9     +STD Y + 8 + 1 , R31
00097f 876a     +STD Y + 8 + 2 , R22
000980 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000981 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
                +
000982 85a8     +LDD R26 , Y + 8
000983 85b9     +LDD R27 , Y + 8 + 1
000984 858a     +LDD R24 , Y + 8 + 2
000985 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
000986 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x12:
                +
000987 e0e4     +LDI R30 , LOW ( 0x4 )
000988 e0f0     +LDI R31 , HIGH ( 0x4 )
000989 e060     +LDI R22 , BYTE3 ( 0x4 )
00098a e070     +LDI R23 , BYTE4 ( 0x4 )
                 	__GETD1N 0x4
00098b 940e 0d75 	CALL __DIVD21
00098d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
00098e 940e 0d0e 	CALL __CWD1
000990 dff1      	RCALL SUBOPT_0x11
000991 940e 0d38 	CALL __MULD12
000993 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x14:
                +
000994 81ac     +LDD R26 , Y + 4
000995 81bd     +LDD R27 , Y + 4 + 1
000996 818e     +LDD R24 , Y + 4 + 2
000997 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000998 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
000999 940e 0d38 	CALL __MULD12
00099b 01df      	MOVW R26,R30
00099c 01cb      	MOVW R24,R22
00099d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
                +
00099e e0e0     +LDI R30 , LOW ( 0x2000 )
00099f e2f0     +LDI R31 , HIGH ( 0x2000 )
0009a0 e060     +LDI R22 , BYTE3 ( 0x2000 )
0009a1 e070     +LDI R23 , BYTE4 ( 0x2000 )
                 	__GETD1N 0x2000
0009a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
0009a3 940e 0d75 	CALL __DIVD21
0009a5 dfd7      	RCALL SUBOPT_0x10
                +
0009a6 85e8     +LDD R30 , Y + 8
0009a7 85f9     +LDD R31 , Y + 8 + 1
0009a8 856a     +LDD R22 , Y + 8 + 2
0009a9 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0009aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x18:
0009ab 940e 0dd1 	CALL __GETD2S0
0009ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
0009ae dffc      	RCALL SUBOPT_0x18
                +
0009af e0e8     +LDI R30 , LOW ( 0x8 )
0009b0 e0f0     +LDI R31 , HIGH ( 0x8 )
0009b1 e060     +LDI R22 , BYTE3 ( 0x8 )
0009b2 e070     +LDI R23 , BYTE4 ( 0x8 )
                 	__GETD1N 0x8
0009b3 940e 0d50 	CALL __DIVD21U
0009b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0009b6 df9f      	RCALL SUBOPT_0x9
                +
0009b7 81ec     +LDD R30 , Y + 4
0009b8 81fd     +LDD R31 , Y + 4 + 1
0009b9 816e     +LDD R22 , Y + 4 + 2
0009ba 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0009bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1B:
0009bc 91a0 0294 	LDS  R26,_temperature
0009be 91b0 0295 	LDS  R27,_temperature+1
0009c0 9180 0296 	LDS  R24,_temperature+2
0009c2 9190 0297 	LDS  R25,_temperature+3
                +
0009c4 e6e4     +LDI R30 , LOW ( 0x64 )
0009c5 e0f0     +LDI R31 , HIGH ( 0x64 )
0009c6 e060     +LDI R22 , BYTE3 ( 0x64 )
0009c7 e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
0009c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1C:
0009c9 940e 0ddb 	CALL __PUTPARD1
0009cb 91a0 0298 	LDS  R26,_pressure
0009cd 91b0 0299 	LDS  R27,_pressure+1
0009cf 9180 029a 	LDS  R24,_pressure+2
0009d1 9190 029b 	LDS  R25,_pressure+3
                +
0009d3 e6e4     +LDI R30 , LOW ( 0x64 )
0009d4 e0f0     +LDI R31 , HIGH ( 0x64 )
0009d5 e060     +LDI R22 , BYTE3 ( 0x64 )
0009d6 e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
0009d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
0009d8 91ed      	LD   R30,X+
0009d9 91fd      	LD   R31,X+
0009da 9631      	ADIW R30,1
0009db 93fe      	ST   -X,R31
0009dc 93ee      	ST   -X,R30
0009dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1E:
0009de 93ba      	ST   -Y,R27
0009df 93aa      	ST   -Y,R26
0009e0 9724      	SBIW R28,4
0009e1 e0e0      	LDI  R30,LOW(0)
0009e2 83e8      	ST   Y,R30
0009e3 83e9      	STD  Y+1,R30
0009e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1F:
0009e5 dfae      	RCALL SUBOPT_0x14
                +
0009e6 e0e0     +LDI R30 , LOW ( 0x41200000 )
0009e7 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0009e8 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0009e9 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0009ea 940e 0c24 	CALL __MULF12
0009ec cf69      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x20:
                +
0009ed 81ec     +LDD R30 , Y + 4
0009ee 81fd     +LDD R31 , Y + 4 + 1
0009ef 816e     +LDD R22 , Y + 4 + 2
0009f0 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
0009f1 85ac     +LDD R26 , Y + 12
0009f2 85bd     +LDD R27 , Y + 12 + 1
0009f3 858e     +LDD R24 , Y + 12 + 2
0009f4 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
0009f5 940e 0cb7 	CALL __CMPF12
0009f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x21:
                +
0009f8 85ac     +LDD R26 , Y + 12
0009f9 85bd     +LDD R27 , Y + 12 + 1
0009fa 858e     +LDD R24 , Y + 12 + 2
0009fb 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
0009fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x22:
                +
0009fd eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0009fe ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0009ff ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000a00 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000a01 940e 0c24 	CALL __MULF12
                +
000a03 87ec     +STD Y + 12 , R30
000a04 87fd     +STD Y + 12 + 1 , R31
000a05 876e     +STD Y + 12 + 2 , R22
000a06 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000a07 5f3f      	SUBI R19,-LOW(1)
000a08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x23:
                +
000a09 e0e0     +LDI R30 , LOW ( 0x41200000 )
000a0a e0f0     +LDI R31 , HIGH ( 0x41200000 )
000a0b e260     +LDI R22 , BYTE3 ( 0x41200000 )
000a0c e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000a0d 940e 0c24 	CALL __MULF12
000a0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
                +
000a10 87ec     +STD Y + 12 , R30
000a11 87fd     +STD Y + 12 + 1 , R31
000a12 876e     +STD Y + 12 + 2 , R22
000a13 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000a14 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x25:
                +
000a15 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000a16 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000a17 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000a18 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000a19 940e 0bd4 	CALL __ADDF12
000a1b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
                +
000a1c eced     +LDI R30 , LOW ( 0x3DCCCCCD )
000a1d ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
000a1e ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
000a1f e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
000a20 940e 0c24 	CALL __MULF12
000a22 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
000a23 85a8      	LDD  R26,Y+8
000a24 85b9      	LDD  R27,Y+8+1
000a25 9611      	ADIW R26,1
000a26 87a8      	STD  Y+8,R26
000a27 87b9      	STD  Y+8+1,R27
000a28 9711      	SBIW R26,1
000a29 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
000a2a 2fe0      	MOV  R30,R16
000a2b 5de0      	SUBI R30,-LOW(48)
000a2c 93ec      	ST   X,R30
000a2d 2fe0      	MOV  R30,R16
000a2e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
000a2f 940e 0de5 	CALL __SWAPD12
000a31 940e 0bcd 	CALL __SUBF12
000a33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2A:
000a34 85e8      	LDD  R30,Y+8
000a35 85f9      	LDD  R31,Y+8+1
000a36 9631      	ADIW R30,1
000a37 87e8      	STD  Y+8,R30
000a38 87f9      	STD  Y+8+1,R31
000a39 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2B:
000a3a 932a      	ST   -Y,R18
000a3b 81af      	LDD  R26,Y+7
000a3c 85b8      	LDD  R27,Y+7+1
000a3d 85e9      	LDD  R30,Y+9
000a3e 85fa      	LDD  R31,Y+9+1
000a3f 9509      	ICALL
000a40 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x2C:
                +
000a41 01fe     +MOVW R30 , R28
000a42 5ae6     +SUBI R30 , LOW ( - 90 )
000a43 4fff     +SBCI R31 , HIGH ( - 90 )
000a44 9001     +LD R0 , Z +
000a45 81f0     +LD R31 , Z
000a46 2de0     +MOV R30 , R0
                 	__GETW1SX 90
000a47 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2D:
000a48 9734      	SBIW R30,4
                +
000a49 01de     +MOVW R26 , R28
000a4a 5aa6     +SUBI R26 , LOW ( - 90 )
000a4b 4fbf     +SBCI R27 , HIGH ( - 90 )
000a4c 93ed     +ST X + , R30
000a4d 93fc     +ST X , R31
                 	__PUTW1SX 90
000a4e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2E:
000a4f 81af      	LDD  R26,Y+7
000a50 85b8      	LDD  R27,Y+7+1
000a51 85e9      	LDD  R30,Y+9
000a52 85fa      	LDD  R31,Y+9+1
000a53 9509      	ICALL
000a54 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2F:
                +
000a55 01de     +MOVW R26 , R28
000a56 5aa6     +SUBI R26 , LOW ( - 90 )
000a57 4fbf     +SBCI R27 , HIGH ( - 90 )
000a58 900d     +LD R0 , X +
000a59 91bc     +LD R27 , X
000a5a 2da0     +MOV R26 , R0
                 	__GETW2SX 90
000a5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
                +
000a5c 87ea     +STD Y + 10 , R30
000a5d 87fb     +STD Y + 10 + 1 , R31
000a5e 876c     +STD Y + 10 + 2 , R22
000a5f 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000a60 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x31:
000a61 dfdf      	RCALL SUBOPT_0x2C
000a62 cfe5      	RJMP SUBOPT_0x2D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x32:
                +
000a63 85ea     +LDD R30 , Y + 10
000a64 85fb     +LDD R31 , Y + 10 + 1
000a65 856c     +LDD R22 , Y + 10 + 2
000a66 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000a67 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x33:
000a68 87ee      	STD  Y+14,R30
000a69 87ff      	STD  Y+14+1,R31
000a6a 85ae      	LDD  R26,Y+14
000a6b 85bf      	LDD  R27,Y+14+1
000a6c 940e 08b6 	CALL _strlen
000a6e 2f1e      	MOV  R17,R30
000a6f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x34:
000a70 dfe4      	RCALL SUBOPT_0x2F
000a71 9614      	ADIW R26,4
000a72 940e 0dbd 	CALL __GETW1P
000a74 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x35:
                +
000a75 8be8     +STD Y + 16 , R30
000a76 8bf9     +STD Y + 16 + 1 , R31
000a77 8b6a     +STD Y + 16 + 2 , R22
000a78 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
000a79 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x36:
000a7a 7f0b      	ANDI R16,LOW(251)
000a7b 89ed      	LDD  R30,Y+21
000a7c 93ea      	ST   -Y,R30
                +
000a7d 01de     +MOVW R26 , R28
000a7e 5aa9     +SUBI R26 , LOW ( - 87 )
000a7f 4fbf     +SBCI R27 , HIGH ( - 87 )
000a80 900d     +LD R0 , X +
000a81 91bc     +LD R27 , X
000a82 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
000a83 01fe     +MOVW R30 , R28
000a84 5ae7     +SUBI R30 , LOW ( - 89 )
000a85 4fff     +SBCI R31 , HIGH ( - 89 )
000a86 9001     +LD R0 , Z +
000a87 81f0     +LD R31 , Z
000a88 2de0     +MOV R30 , R0
                 	__GETW1SX 89
000a89 9509      	ICALL
000a8a 3050      	CPI  R21,0
000a8b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x37:
                +
000a8c 89e8     +LDD R30 , Y + 16
000a8d 89f9     +LDD R31 , Y + 16 + 1
000a8e 896a     +LDD R22 , Y + 16 + 2
000a8f 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
000a90 85aa     +LDD R26 , Y + 10
000a91 85bb     +LDD R27 , Y + 10 + 1
000a92 858c     +LDD R24 , Y + 10 + 2
000a93 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000a94 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
000a95 01de      	MOVW R26,R28
000a96 961c      	ADIW R26,12
000a97 940e 0cd7 	CALL __ADDW2R15
000a99 940e 0dbd 	CALL __GETW1P
000a9b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
000a9c 81ee      	LDD  R30,Y+6
000a9d 81ff      	LDD  R31,Y+6+1
000a9e 93fa      	ST   -Y,R31
000a9f 93ea      	ST   -Y,R30
000aa0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3A:
                +
000aa1 87e9     +STD Y + 9 , R30
000aa2 87fa     +STD Y + 9 + 1 , R31
000aa3 876b     +STD Y + 9 + 2 , R22
000aa4 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000aa5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3B:
000aa6 81ae      	LDD  R26,Y+6
000aa7 81bf      	LDD  R27,Y+6+1
000aa8 9611      	ADIW R26,1
000aa9 83ae      	STD  Y+6,R26
000aaa 83bf      	STD  Y+6+1,R27
000aab 9711      	SBIW R26,1
000aac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3C:
                +
000aad 81aa     +LDD R26 , Y + 2
000aae 81bb     +LDD R27 , Y + 2 + 1
000aaf 818c     +LDD R24 , Y + 2 + 2
000ab0 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000ab1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3D:
                +
000ab2 83ea     +STD Y + 2 , R30
000ab3 83fb     +STD Y + 2 + 1 , R31
000ab4 836c     +STD Y + 2 + 2 , R22
000ab5 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000ab6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3E:
                +
000ab7 81ea     +LDD R30 , Y + 2
000ab8 81fb     +LDD R31 , Y + 2 + 1
000ab9 816c     +LDD R22 , Y + 2 + 2
000aba 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000abb 85a9     +LDD R26 , Y + 9
000abc 85ba     +LDD R27 , Y + 9 + 1
000abd 858b     +LDD R24 , Y + 9 + 2
000abe 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000abf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3F:
                +
000ac0 85a9     +LDD R26 , Y + 9
000ac1 85ba     +LDD R27 , Y + 9 + 1
000ac2 858b     +LDD R24 , Y + 9 + 2
000ac3 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000ac4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x40:
000ac5 940e 0856 	CALL __lcd_write_data
000ac7 e0a3      	LDI  R26,LOW(3)
000ac8 e0b0      	LDI  R27,0
000ac9 940c 0b24 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x41:
000acb e3a0      	LDI  R26,LOW(48)
000acc 940e 0842 	CALL __lcd_write_nibble_G102
                +
000ace ec88     +LDI R24 , LOW ( 200 )
000acf e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000ad0 9701     +SBIW R24 , 1
000ad1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000ad2 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x15 ;PORTC
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
000ad3 98a8      	cbi  __i2c_port,__scl_bit
000ad4 98a9      	cbi  __i2c_port,__sda_bit
000ad5 9aa0      	sbi  __i2c_dir,__scl_bit
000ad6 98a1      	cbi  __i2c_dir,__sda_bit
000ad7 c015      	rjmp __i2c_delay2
                 _i2c_start:
000ad8 98a1      	cbi  __i2c_dir,__sda_bit
000ad9 98a0      	cbi  __i2c_dir,__scl_bit
000ada 27ee      	clr  r30
000adb 0000      	nop
000adc 9b99      	sbis __i2c_pin,__sda_bit
000add 9508      	ret
000ade 9b98      	sbis __i2c_pin,__scl_bit
000adf 9508      	ret
000ae0 d004      	rcall __i2c_delay1
000ae1 9aa1      	sbi  __i2c_dir,__sda_bit
000ae2 d002      	rcall __i2c_delay1
000ae3 9aa0      	sbi  __i2c_dir,__scl_bit
000ae4 e0e1      	ldi  r30,1
                 __i2c_delay1:
000ae5 e06d      	ldi  r22,13
000ae6 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000ae7 9aa1      	sbi  __i2c_dir,__sda_bit
000ae8 9aa0      	sbi  __i2c_dir,__scl_bit
000ae9 d003      	rcall __i2c_delay2
000aea 98a0      	cbi  __i2c_dir,__scl_bit
000aeb dff9      	rcall __i2c_delay1
000aec 98a1      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000aed e16b      	ldi  r22,27
                 __i2c_delay2l:
000aee 956a      	dec  r22
000aef f7f1      	brne __i2c_delay2l
000af0 9508      	ret
                 _i2c_read:
000af1 e078      	ldi  r23,8
                 __i2c_read0:
000af2 98a0      	cbi  __i2c_dir,__scl_bit
000af3 dff1      	rcall __i2c_delay1
                 __i2c_read3:
000af4 9b98      	sbis __i2c_pin,__scl_bit
000af5 cffe      	rjmp __i2c_read3
000af6 dfee      	rcall __i2c_delay1
000af7 9488      	clc
000af8 9999      	sbic __i2c_pin,__sda_bit
000af9 9408      	sec
000afa 9aa0      	sbi  __i2c_dir,__scl_bit
000afb dff1      	rcall __i2c_delay2
000afc 1fee      	rol  r30
000afd 957a      	dec  r23
000afe f799      	brne __i2c_read0
000aff 2f7a      	mov  r23,r26
000b00 2377      	tst  r23
000b01 f411      	brne __i2c_read1
000b02 98a1      	cbi  __i2c_dir,__sda_bit
000b03 c001      	rjmp __i2c_read2
                 __i2c_read1:
000b04 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000b05 dfdf      	rcall __i2c_delay1
000b06 98a0      	cbi  __i2c_dir,__scl_bit
000b07 dfe5      	rcall __i2c_delay2
000b08 9aa0      	sbi  __i2c_dir,__scl_bit
000b09 dfdb      	rcall __i2c_delay1
000b0a 98a1      	cbi  __i2c_dir,__sda_bit
000b0b cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000b0c e078      	ldi  r23,8
                 __i2c_write0:
000b0d 0faa      	lsl  r26
000b0e f410      	brcc __i2c_write1
000b0f 98a1      	cbi  __i2c_dir,__sda_bit
000b10 c001      	rjmp __i2c_write2
                 __i2c_write1:
000b11 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
000b12 dfda      	rcall __i2c_delay2
000b13 98a0      	cbi  __i2c_dir,__scl_bit
000b14 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
000b15 9b98      	sbis __i2c_pin,__scl_bit
000b16 cffe      	rjmp __i2c_write3
000b17 dfcd      	rcall __i2c_delay1
000b18 9aa0      	sbi  __i2c_dir,__scl_bit
000b19 957a      	dec  r23
000b1a f791      	brne __i2c_write0
000b1b 98a1      	cbi  __i2c_dir,__sda_bit
000b1c dfc8      	rcall __i2c_delay1
000b1d 98a0      	cbi  __i2c_dir,__scl_bit
000b1e dfce      	rcall __i2c_delay2
000b1f e0e1      	ldi  r30,1
000b20 9999      	sbic __i2c_pin,__sda_bit
000b21 27ee      	clr  r30
000b22 9aa0      	sbi  __i2c_dir,__scl_bit
000b23 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
000b24 9610      	adiw r26,0
000b25 f039      	breq __delay_ms1
                 __delay_ms0:
000b26 95a8      	wdr
                +
000b27 ed80     +LDI R24 , LOW ( 0x7D0 )
000b28 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000b29 9701     +SBIW R24 , 1
000b2a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000b2b 9711      	sbiw r26,1
000b2c f7c9      	brne __delay_ms0
                 __delay_ms1:
000b2d 9508      	ret
                 
                 __ANEGF1:
000b2e 9730      	SBIW R30,0
000b2f 4060      	SBCI R22,0
000b30 4070      	SBCI R23,0
000b31 f009      	BREQ __ANEGF10
000b32 5870      	SUBI R23,0x80
                 __ANEGF10:
000b33 9508      	RET
                 
                 __ROUND_REPACK:
000b34 2355      	TST  R21
000b35 f442      	BRPL __REPACK
000b36 3850      	CPI  R21,0x80
000b37 f411      	BRNE __ROUND_REPACK0
000b38 ffe0      	SBRS R30,0
000b39 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000b3a 9631      	ADIW R30,1
000b3b 1f69      	ADC  R22,R25
000b3c 1f79      	ADC  R23,R25
000b3d f06b      	BRVS __REPACK1
                 
                 __REPACK:
000b3e e850      	LDI  R21,0x80
000b3f 2757      	EOR  R21,R23
000b40 f411      	BRNE __REPACK0
000b41 935f      	PUSH R21
000b42 c0cf      	RJMP __ZERORES
                 __REPACK0:
000b43 3f5f      	CPI  R21,0xFF
000b44 f031      	BREQ __REPACK1
000b45 0f66      	LSL  R22
000b46 0c00      	LSL  R0
000b47 9557      	ROR  R21
000b48 9567      	ROR  R22
000b49 2f75      	MOV  R23,R21
000b4a 9508      	RET
                 __REPACK1:
000b4b 935f      	PUSH R21
000b4c 2000      	TST  R0
000b4d f00a      	BRMI __REPACK2
000b4e c0cf      	RJMP __MAXRES
                 __REPACK2:
000b4f c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000b50 e850      	LDI  R21,0x80
000b51 2e19      	MOV  R1,R25
000b52 2215      	AND  R1,R21
000b53 0f88      	LSL  R24
000b54 1f99      	ROL  R25
000b55 2795      	EOR  R25,R21
000b56 0f55      	LSL  R21
000b57 9587      	ROR  R24
                 
                 __UNPACK1:
000b58 e850      	LDI  R21,0x80
000b59 2e07      	MOV  R0,R23
000b5a 2205      	AND  R0,R21
000b5b 0f66      	LSL  R22
000b5c 1f77      	ROL  R23
000b5d 2775      	EOR  R23,R21
000b5e 0f55      	LSL  R21
000b5f 9567      	ROR  R22
000b60 9508      	RET
                 
                 __CFD1U:
000b61 9468      	SET
000b62 c001      	RJMP __CFD1U0
                 __CFD1:
000b63 94e8      	CLT
                 __CFD1U0:
000b64 935f      	PUSH R21
000b65 dff2      	RCALL __UNPACK1
000b66 3870      	CPI  R23,0x80
000b67 f018      	BRLO __CFD10
000b68 3f7f      	CPI  R23,0xFF
000b69 f408      	BRCC __CFD10
000b6a c0a7      	RJMP __ZERORES
                 __CFD10:
000b6b e156      	LDI  R21,22
000b6c 1b57      	SUB  R21,R23
000b6d f4aa      	BRPL __CFD11
000b6e 9551      	NEG  R21
000b6f 3058      	CPI  R21,8
000b70 f40e      	BRTC __CFD19
000b71 3059      	CPI  R21,9
                 __CFD19:
000b72 f030      	BRLO __CFD17
000b73 efef      	SER  R30
000b74 efff      	SER  R31
000b75 ef6f      	SER  R22
000b76 e77f      	LDI  R23,0x7F
000b77 f977      	BLD  R23,7
000b78 c01a      	RJMP __CFD15
                 __CFD17:
000b79 2777      	CLR  R23
000b7a 2355      	TST  R21
000b7b f0b9      	BREQ __CFD15
                 __CFD18:
000b7c 0fee      	LSL  R30
000b7d 1fff      	ROL  R31
000b7e 1f66      	ROL  R22
000b7f 1f77      	ROL  R23
000b80 955a      	DEC  R21
000b81 f7d1      	BRNE __CFD18
000b82 c010      	RJMP __CFD15
                 __CFD11:
000b83 2777      	CLR  R23
                 __CFD12:
000b84 3058      	CPI  R21,8
000b85 f028      	BRLO __CFD13
000b86 2fef      	MOV  R30,R31
000b87 2ff6      	MOV  R31,R22
000b88 2f67      	MOV  R22,R23
000b89 5058      	SUBI R21,8
000b8a cff9      	RJMP __CFD12
                 __CFD13:
000b8b 2355      	TST  R21
000b8c f031      	BREQ __CFD15
                 __CFD14:
000b8d 9576      	LSR  R23
000b8e 9567      	ROR  R22
000b8f 95f7      	ROR  R31
000b90 95e7      	ROR  R30
000b91 955a      	DEC  R21
000b92 f7d1      	BRNE __CFD14
                 __CFD15:
000b93 2000      	TST  R0
000b94 f40a      	BRPL __CFD16
000b95 d159      	RCALL __ANEGD1
                 __CFD16:
000b96 915f      	POP  R21
000b97 9508      	RET
                 
                 __CDF1U:
000b98 9468      	SET
000b99 c001      	RJMP __CDF1U0
                 __CDF1:
000b9a 94e8      	CLT
                 __CDF1U0:
000b9b 9730      	SBIW R30,0
000b9c 4060      	SBCI R22,0
000b9d 4070      	SBCI R23,0
000b9e f0b1      	BREQ __CDF10
000b9f 2400      	CLR  R0
000ba0 f026      	BRTS __CDF11
000ba1 2377      	TST  R23
000ba2 f412      	BRPL __CDF11
000ba3 9400      	COM  R0
000ba4 d14a      	RCALL __ANEGD1
                 __CDF11:
000ba5 2e17      	MOV  R1,R23
000ba6 e17e      	LDI  R23,30
000ba7 2011      	TST  R1
                 __CDF12:
000ba8 f032      	BRMI __CDF13
000ba9 957a      	DEC  R23
000baa 0fee      	LSL  R30
000bab 1fff      	ROL  R31
000bac 1f66      	ROL  R22
000bad 1c11      	ROL  R1
000bae cff9      	RJMP __CDF12
                 __CDF13:
000baf 2fef      	MOV  R30,R31
000bb0 2ff6      	MOV  R31,R22
000bb1 2d61      	MOV  R22,R1
000bb2 935f      	PUSH R21
000bb3 df8a      	RCALL __REPACK
000bb4 915f      	POP  R21
                 __CDF10:
000bb5 9508      	RET
                 
                 __SWAPACC:
000bb6 934f      	PUSH R20
000bb7 01af      	MOVW R20,R30
000bb8 01fd      	MOVW R30,R26
000bb9 01da      	MOVW R26,R20
000bba 01ab      	MOVW R20,R22
000bbb 01bc      	MOVW R22,R24
000bbc 01ca      	MOVW R24,R20
000bbd 2d40      	MOV  R20,R0
000bbe 2c01      	MOV  R0,R1
000bbf 2e14      	MOV  R1,R20
000bc0 914f      	POP  R20
000bc1 9508      	RET
                 
                 __UADD12:
000bc2 0fea      	ADD  R30,R26
000bc3 1ffb      	ADC  R31,R27
000bc4 1f68      	ADC  R22,R24
000bc5 9508      	RET
                 
                 __NEGMAN1:
000bc6 95e0      	COM  R30
000bc7 95f0      	COM  R31
000bc8 9560      	COM  R22
000bc9 5fef      	SUBI R30,-1
000bca 4fff      	SBCI R31,-1
000bcb 4f6f      	SBCI R22,-1
000bcc 9508      	RET
                 
                 __SUBF12:
000bcd 935f      	PUSH R21
000bce df81      	RCALL __UNPACK
000bcf 3890      	CPI  R25,0x80
000bd0 f171      	BREQ __ADDF129
000bd1 e850      	LDI  R21,0x80
000bd2 2615      	EOR  R1,R21
                 
000bd3 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000bd4 935f      	PUSH R21
000bd5 df7a      	RCALL __UNPACK
000bd6 3890      	CPI  R25,0x80
000bd7 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000bd8 3870      	CPI  R23,0x80
000bd9 f121      	BREQ __ADDF128
                 __ADDF121:
000bda 2f57      	MOV  R21,R23
000bdb 1b59      	SUB  R21,R25
000bdc f12b      	BRVS __ADDF1211
000bdd f412      	BRPL __ADDF122
000bde dfd7      	RCALL __SWAPACC
000bdf cffa      	RJMP __ADDF121
                 __ADDF122:
000be0 3158      	CPI  R21,24
000be1 f018      	BRLO __ADDF123
000be2 27aa      	CLR  R26
000be3 27bb      	CLR  R27
000be4 2788      	CLR  R24
                 __ADDF123:
000be5 3058      	CPI  R21,8
000be6 f028      	BRLO __ADDF124
000be7 2fab      	MOV  R26,R27
000be8 2fb8      	MOV  R27,R24
000be9 2788      	CLR  R24
000bea 5058      	SUBI R21,8
000beb cff9      	RJMP __ADDF123
                 __ADDF124:
000bec 2355      	TST  R21
000bed f029      	BREQ __ADDF126
                 __ADDF125:
000bee 9586      	LSR  R24
000bef 95b7      	ROR  R27
000bf0 95a7      	ROR  R26
000bf1 955a      	DEC  R21
000bf2 f7d9      	BRNE __ADDF125
                 __ADDF126:
000bf3 2d50      	MOV  R21,R0
000bf4 2551      	EOR  R21,R1
000bf5 f072      	BRMI __ADDF127
000bf6 dfcb      	RCALL __UADD12
000bf7 f438      	BRCC __ADDF129
000bf8 9567      	ROR  R22
000bf9 95f7      	ROR  R31
000bfa 95e7      	ROR  R30
000bfb 9573      	INC  R23
000bfc f413      	BRVC __ADDF129
000bfd c020      	RJMP __MAXRES
                 __ADDF128:
000bfe dfb7      	RCALL __SWAPACC
                 __ADDF129:
000bff df3e      	RCALL __REPACK
000c00 915f      	POP  R21
000c01 9508      	RET
                 __ADDF1211:
000c02 f7d8      	BRCC __ADDF128
000c03 cffb      	RJMP __ADDF129
                 __ADDF127:
000c04 1bea      	SUB  R30,R26
000c05 0bfb      	SBC  R31,R27
000c06 0b68      	SBC  R22,R24
000c07 f051      	BREQ __ZERORES
000c08 f410      	BRCC __ADDF1210
000c09 9400      	COM  R0
000c0a dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000c0b 2366      	TST  R22
000c0c f392      	BRMI __ADDF129
000c0d 0fee      	LSL  R30
000c0e 1fff      	ROL  R31
000c0f 1f66      	ROL  R22
000c10 957a      	DEC  R23
000c11 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000c12 27ee      	CLR  R30
000c13 27ff      	CLR  R31
000c14 2766      	CLR  R22
000c15 2777      	CLR  R23
000c16 915f      	POP  R21
000c17 9508      	RET
                 
                 __MINRES:
000c18 efef      	SER  R30
000c19 efff      	SER  R31
000c1a e76f      	LDI  R22,0x7F
000c1b ef7f      	SER  R23
000c1c 915f      	POP  R21
000c1d 9508      	RET
                 
                 __MAXRES:
000c1e efef      	SER  R30
000c1f efff      	SER  R31
000c20 e76f      	LDI  R22,0x7F
000c21 e77f      	LDI  R23,0x7F
000c22 915f      	POP  R21
000c23 9508      	RET
                 
                 __MULF12:
000c24 935f      	PUSH R21
000c25 df2a      	RCALL __UNPACK
000c26 3870      	CPI  R23,0x80
000c27 f351      	BREQ __ZERORES
000c28 3890      	CPI  R25,0x80
000c29 f341      	BREQ __ZERORES
000c2a 2401      	EOR  R0,R1
000c2b 9408      	SEC
000c2c 1f79      	ADC  R23,R25
000c2d f423      	BRVC __MULF124
000c2e f31c      	BRLT __ZERORES
                 __MULF125:
000c2f 2000      	TST  R0
000c30 f33a      	BRMI __MINRES
000c31 cfec      	RJMP __MAXRES
                 __MULF124:
000c32 920f      	PUSH R0
000c33 931f      	PUSH R17
000c34 932f      	PUSH R18
000c35 933f      	PUSH R19
000c36 934f      	PUSH R20
000c37 2711      	CLR  R17
000c38 2722      	CLR  R18
000c39 2799      	CLR  R25
000c3a 9f68      	MUL  R22,R24
000c3b 01a0      	MOVW R20,R0
000c3c 9f8f      	MUL  R24,R31
000c3d 2d30      	MOV  R19,R0
000c3e 0d41      	ADD  R20,R1
000c3f 1f59      	ADC  R21,R25
000c40 9f6b      	MUL  R22,R27
000c41 0d30      	ADD  R19,R0
000c42 1d41      	ADC  R20,R1
000c43 1f59      	ADC  R21,R25
000c44 9f8e      	MUL  R24,R30
000c45 d027      	RCALL __MULF126
000c46 9fbf      	MUL  R27,R31
000c47 d025      	RCALL __MULF126
000c48 9f6a      	MUL  R22,R26
000c49 d023      	RCALL __MULF126
000c4a 9fbe      	MUL  R27,R30
000c4b d01d      	RCALL __MULF127
000c4c 9faf      	MUL  R26,R31
000c4d d01b      	RCALL __MULF127
000c4e 9fae      	MUL  R26,R30
000c4f 0d11      	ADD  R17,R1
000c50 1f29      	ADC  R18,R25
000c51 1f39      	ADC  R19,R25
000c52 1f49      	ADC  R20,R25
000c53 1f59      	ADC  R21,R25
000c54 2fe3      	MOV  R30,R19
000c55 2ff4      	MOV  R31,R20
000c56 2f65      	MOV  R22,R21
000c57 2f52      	MOV  R21,R18
000c58 914f      	POP  R20
000c59 913f      	POP  R19
000c5a 912f      	POP  R18
000c5b 911f      	POP  R17
000c5c 900f      	POP  R0
000c5d 2366      	TST  R22
000c5e f02a      	BRMI __MULF122
000c5f 0f55      	LSL  R21
000c60 1fee      	ROL  R30
000c61 1fff      	ROL  R31
000c62 1f66      	ROL  R22
000c63 c002      	RJMP __MULF123
                 __MULF122:
000c64 9573      	INC  R23
000c65 f24b      	BRVS __MULF125
                 __MULF123:
000c66 decd      	RCALL __ROUND_REPACK
000c67 915f      	POP  R21
000c68 9508      	RET
                 
                 __MULF127:
000c69 0d10      	ADD  R17,R0
000c6a 1d21      	ADC  R18,R1
000c6b 1f39      	ADC  R19,R25
000c6c c002      	RJMP __MULF128
                 __MULF126:
000c6d 0d20      	ADD  R18,R0
000c6e 1d31      	ADC  R19,R1
                 __MULF128:
000c6f 1f49      	ADC  R20,R25
000c70 1f59      	ADC  R21,R25
000c71 9508      	RET
                 
                 __DIVF21:
000c72 935f      	PUSH R21
000c73 dedc      	RCALL __UNPACK
000c74 3870      	CPI  R23,0x80
000c75 f421      	BRNE __DIVF210
000c76 2011      	TST  R1
                 __DIVF211:
000c77 f40a      	BRPL __DIVF219
000c78 cf9f      	RJMP __MINRES
                 __DIVF219:
000c79 cfa4      	RJMP __MAXRES
                 __DIVF210:
000c7a 3890      	CPI  R25,0x80
000c7b f409      	BRNE __DIVF218
                 __DIVF217:
000c7c cf95      	RJMP __ZERORES
                 __DIVF218:
000c7d 2401      	EOR  R0,R1
000c7e 9408      	SEC
000c7f 0b97      	SBC  R25,R23
000c80 f41b      	BRVC __DIVF216
000c81 f3d4      	BRLT __DIVF217
000c82 2000      	TST  R0
000c83 cff3      	RJMP __DIVF211
                 __DIVF216:
000c84 2f79      	MOV  R23,R25
000c85 931f      	PUSH R17
000c86 932f      	PUSH R18
000c87 933f      	PUSH R19
000c88 934f      	PUSH R20
000c89 2411      	CLR  R1
000c8a 2711      	CLR  R17
000c8b 2722      	CLR  R18
000c8c 2733      	CLR  R19
000c8d 2744      	CLR  R20
000c8e 2755      	CLR  R21
000c8f e290      	LDI  R25,32
                 __DIVF212:
000c90 17ae      	CP   R26,R30
000c91 07bf      	CPC  R27,R31
000c92 0786      	CPC  R24,R22
000c93 0741      	CPC  R20,R17
000c94 f030      	BRLO __DIVF213
000c95 1bae      	SUB  R26,R30
000c96 0bbf      	SBC  R27,R31
000c97 0b86      	SBC  R24,R22
000c98 0b41      	SBC  R20,R17
000c99 9408      	SEC
000c9a c001      	RJMP __DIVF214
                 __DIVF213:
000c9b 9488      	CLC
                 __DIVF214:
000c9c 1f55      	ROL  R21
000c9d 1f22      	ROL  R18
000c9e 1f33      	ROL  R19
000c9f 1c11      	ROL  R1
000ca0 1faa      	ROL  R26
000ca1 1fbb      	ROL  R27
000ca2 1f88      	ROL  R24
000ca3 1f44      	ROL  R20
000ca4 959a      	DEC  R25
000ca5 f751      	BRNE __DIVF212
000ca6 01f9      	MOVW R30,R18
000ca7 2d61      	MOV  R22,R1
000ca8 914f      	POP  R20
000ca9 913f      	POP  R19
000caa 912f      	POP  R18
000cab 911f      	POP  R17
000cac 2366      	TST  R22
000cad f032      	BRMI __DIVF215
000cae 0f55      	LSL  R21
000caf 1fee      	ROL  R30
000cb0 1fff      	ROL  R31
000cb1 1f66      	ROL  R22
000cb2 957a      	DEC  R23
000cb3 f243      	BRVS __DIVF217
                 __DIVF215:
000cb4 de7f      	RCALL __ROUND_REPACK
000cb5 915f      	POP  R21
000cb6 9508      	RET
                 
                 __CMPF12:
000cb7 2399      	TST  R25
000cb8 f09a      	BRMI __CMPF120
000cb9 2377      	TST  R23
000cba f042      	BRMI __CMPF121
000cbb 1797      	CP   R25,R23
000cbc f048      	BRLO __CMPF122
000cbd f429      	BRNE __CMPF121
000cbe 17ae      	CP   R26,R30
000cbf 07bf      	CPC  R27,R31
000cc0 0786      	CPC  R24,R22
000cc1 f020      	BRLO __CMPF122
000cc2 f031      	BREQ __CMPF123
                 __CMPF121:
000cc3 9498      	CLZ
000cc4 9488      	CLC
000cc5 9508      	RET
                 __CMPF122:
000cc6 9498      	CLZ
000cc7 9408      	SEC
000cc8 9508      	RET
                 __CMPF123:
000cc9 9418      	SEZ
000cca 9488      	CLC
000ccb 9508      	RET
                 __CMPF120:
000ccc 2377      	TST  R23
000ccd f7c2      	BRPL __CMPF122
000cce 1797      	CP   R25,R23
000ccf f398      	BRLO __CMPF121
000cd0 f7a9      	BRNE __CMPF122
000cd1 17ea      	CP   R30,R26
000cd2 07fb      	CPC  R31,R27
000cd3 0768      	CPC  R22,R24
000cd4 f388      	BRLO __CMPF122
000cd5 f399      	BREQ __CMPF123
000cd6 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000cd7 2400      	CLR  R0
000cd8 0daf      	ADD  R26,R15
000cd9 1db0      	ADC  R27,R0
000cda 9508      	RET
                 
                 __ADDD12:
000cdb 0fea      	ADD  R30,R26
000cdc 1ffb      	ADC  R31,R27
000cdd 1f68      	ADC  R22,R24
000cde 1f79      	ADC  R23,R25
000cdf 9508      	RET
                 
                 __ADDD21:
000ce0 0fae      	ADD  R26,R30
000ce1 1fbf      	ADC  R27,R31
000ce2 1f86      	ADC  R24,R22
000ce3 1f97      	ADC  R25,R23
000ce4 9508      	RET
                 
                 __SUBD12:
000ce5 1bea      	SUB  R30,R26
000ce6 0bfb      	SBC  R31,R27
000ce7 0b68      	SBC  R22,R24
000ce8 0b79      	SBC  R23,R25
000ce9 9508      	RET
                 
                 __SUBD21:
000cea 1bae      	SUB  R26,R30
000ceb 0bbf      	SBC  R27,R31
000cec 0b86      	SBC  R24,R22
000ced 0b97      	SBC  R25,R23
000cee 9508      	RET
                 
                 __ANEGD1:
000cef 95f0      	COM  R31
000cf0 9560      	COM  R22
000cf1 9570      	COM  R23
000cf2 95e1      	NEG  R30
000cf3 4fff      	SBCI R31,-1
000cf4 4f6f      	SBCI R22,-1
000cf5 4f7f      	SBCI R23,-1
000cf6 9508      	RET
                 
                 __LSRD12:
000cf7 23ee      	TST  R30
000cf8 2e0e      	MOV  R0,R30
000cf9 01fd      	MOVW R30,R26
000cfa 01bc      	MOVW R22,R24
000cfb f031      	BREQ __LSRD12R
                 __LSRD12L:
000cfc 9576      	LSR  R23
000cfd 9567      	ROR  R22
000cfe 95f7      	ROR  R31
000cff 95e7      	ROR  R30
000d00 940a      	DEC  R0
000d01 f7d1      	BRNE __LSRD12L
                 __LSRD12R:
000d02 9508      	RET
                 
                 __LSLD1:
000d03 0fee      	LSL  R30
000d04 1fff      	ROL  R31
000d05 1f66      	ROL  R22
000d06 1f77      	ROL  R23
000d07 9508      	RET
                 
                 __CBD1:
000d08 2ffe      	MOV  R31,R30
000d09 0fff      	ADD  R31,R31
000d0a 0bff      	SBC  R31,R31
000d0b 2f6f      	MOV  R22,R31
000d0c 2f7f      	MOV  R23,R31
000d0d 9508      	RET
                 
                 __CWD1:
000d0e 2f6f      	MOV  R22,R31
000d0f 0f66      	ADD  R22,R22
000d10 0b66      	SBC  R22,R22
000d11 2f76      	MOV  R23,R22
000d12 9508      	RET
                 
                 __CWD2:
000d13 2f8b      	MOV  R24,R27
000d14 0f88      	ADD  R24,R24
000d15 0b88      	SBC  R24,R24
000d16 2f98      	MOV  R25,R24
000d17 9508      	RET
                 
                 __MULD12U:
000d18 9f7a      	MUL  R23,R26
000d19 2d70      	MOV  R23,R0
000d1a 9f6b      	MUL  R22,R27
000d1b 0d70      	ADD  R23,R0
000d1c 9ff8      	MUL  R31,R24
000d1d 0d70      	ADD  R23,R0
000d1e 9fe9      	MUL  R30,R25
000d1f 0d70      	ADD  R23,R0
000d20 9f6a      	MUL  R22,R26
000d21 2d60      	MOV  R22,R0
000d22 0d71      	ADD  R23,R1
000d23 9ffb      	MUL  R31,R27
000d24 0d60      	ADD  R22,R0
000d25 1d71      	ADC  R23,R1
000d26 9fe8      	MUL  R30,R24
000d27 0d60      	ADD  R22,R0
000d28 1d71      	ADC  R23,R1
000d29 2788      	CLR  R24
000d2a 9ffa      	MUL  R31,R26
000d2b 2df0      	MOV  R31,R0
000d2c 0d61      	ADD  R22,R1
000d2d 1f78      	ADC  R23,R24
000d2e 9feb      	MUL  R30,R27
000d2f 0df0      	ADD  R31,R0
000d30 1d61      	ADC  R22,R1
000d31 1f78      	ADC  R23,R24
000d32 9fea      	MUL  R30,R26
000d33 2de0      	MOV  R30,R0
000d34 0df1      	ADD  R31,R1
000d35 1f68      	ADC  R22,R24
000d36 1f78      	ADC  R23,R24
000d37 9508      	RET
                 
                 __MULD12:
000d38 d071      	RCALL __CHKSIGND
000d39 dfde      	RCALL __MULD12U
000d3a f40e      	BRTC __MULD121
000d3b dfb3      	RCALL __ANEGD1
                 __MULD121:
000d3c 9508      	RET
                 
                 __DIVB21U:
000d3d 2400      	CLR  R0
000d3e e098      	LDI  R25,8
                 __DIVB21U1:
000d3f 0faa      	LSL  R26
000d40 1c00      	ROL  R0
000d41 1a0e      	SUB  R0,R30
000d42 f410      	BRCC __DIVB21U2
000d43 0e0e      	ADD  R0,R30
000d44 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
000d45 60a1      	SBR  R26,1
                 __DIVB21U3:
000d46 959a      	DEC  R25
000d47 f7b9      	BRNE __DIVB21U1
000d48 2fea      	MOV  R30,R26
000d49 2da0      	MOV  R26,R0
000d4a 9508      	RET
                 
                 __DIVB21:
000d4b d052      	RCALL __CHKSIGNB
000d4c dff0      	RCALL __DIVB21U
000d4d f40e      	BRTC __DIVB211
000d4e 95e1      	NEG  R30
                 __DIVB211:
000d4f 9508      	RET
                 
                 __DIVD21U:
000d50 933f      	PUSH R19
000d51 934f      	PUSH R20
000d52 935f      	PUSH R21
000d53 2400      	CLR  R0
000d54 2411      	CLR  R1
000d55 2744      	CLR  R20
000d56 2755      	CLR  R21
000d57 e230      	LDI  R19,32
                 __DIVD21U1:
000d58 0faa      	LSL  R26
000d59 1fbb      	ROL  R27
000d5a 1f88      	ROL  R24
000d5b 1f99      	ROL  R25
000d5c 1c00      	ROL  R0
000d5d 1c11      	ROL  R1
000d5e 1f44      	ROL  R20
000d5f 1f55      	ROL  R21
000d60 1a0e      	SUB  R0,R30
000d61 0a1f      	SBC  R1,R31
000d62 0b46      	SBC  R20,R22
000d63 0b57      	SBC  R21,R23
000d64 f428      	BRCC __DIVD21U2
000d65 0e0e      	ADD  R0,R30
000d66 1e1f      	ADC  R1,R31
000d67 1f46      	ADC  R20,R22
000d68 1f57      	ADC  R21,R23
000d69 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000d6a 60a1      	SBR  R26,1
                 __DIVD21U3:
000d6b 953a      	DEC  R19
000d6c f759      	BRNE __DIVD21U1
000d6d 01fd      	MOVW R30,R26
000d6e 01bc      	MOVW R22,R24
000d6f 01d0      	MOVW R26,R0
000d70 01ca      	MOVW R24,R20
000d71 915f      	POP  R21
000d72 914f      	POP  R20
000d73 913f      	POP  R19
000d74 9508      	RET
                 
                 __DIVD21:
000d75 d034      	RCALL __CHKSIGND
000d76 dfd9      	RCALL __DIVD21U
000d77 f40e      	BRTC __DIVD211
000d78 df76      	RCALL __ANEGD1
                 __DIVD211:
000d79 9508      	RET
                 
                 __MODB21:
000d7a 94e8      	CLT
000d7b ffa7      	SBRS R26,7
000d7c c002      	RJMP __MODB211
000d7d 95a1      	NEG  R26
000d7e 9468      	SET
                 __MODB211:
000d7f fde7      	SBRC R30,7
000d80 95e1      	NEG  R30
000d81 dfbb      	RCALL __DIVB21U
000d82 2fea      	MOV  R30,R26
000d83 f40e      	BRTC __MODB212
000d84 95e1      	NEG  R30
                 __MODB212:
000d85 9508      	RET
                 
                 __MODD21U:
000d86 dfc9      	RCALL __DIVD21U
000d87 01fd      	MOVW R30,R26
000d88 01bc      	MOVW R22,R24
000d89 9508      	RET
                 
                 __MODD21:
000d8a 94e8      	CLT
000d8b ff97      	SBRS R25,7
000d8c c009      	RJMP __MODD211
000d8d 95a0      	COM  R26
000d8e 95b0      	COM  R27
000d8f 9580      	COM  R24
000d90 9590      	COM  R25
000d91 5faf      	SUBI R26,-1
000d92 4fbf      	SBCI R27,-1
000d93 4f8f      	SBCI R24,-1
000d94 4f9f      	SBCI R25,-1
000d95 9468      	SET
                 __MODD211:
000d96 fd77      	SBRC R23,7
000d97 df57      	RCALL __ANEGD1
000d98 dfb7      	RCALL __DIVD21U
000d99 01fd      	MOVW R30,R26
000d9a 01bc      	MOVW R22,R24
000d9b f40e      	BRTC __MODD212
000d9c df52      	RCALL __ANEGD1
                 __MODD212:
000d9d 9508      	RET
                 
                 __CHKSIGNB:
000d9e 94e8      	CLT
000d9f ffe7      	SBRS R30,7
000da0 c002      	RJMP __CHKSB1
000da1 95e1      	NEG  R30
000da2 9468      	SET
                 __CHKSB1:
000da3 ffa7      	SBRS R26,7
000da4 c004      	RJMP __CHKSB2
000da5 95a1      	NEG  R26
000da6 f800      	BLD  R0,0
000da7 9403      	INC  R0
000da8 fa00      	BST  R0,0
                 __CHKSB2:
000da9 9508      	RET
                 
                 __CHKSIGND:
000daa 94e8      	CLT
000dab ff77      	SBRS R23,7
000dac c002      	RJMP __CHKSD1
000dad df41      	RCALL __ANEGD1
000dae 9468      	SET
                 __CHKSD1:
000daf ff97      	SBRS R25,7
000db0 c00b      	RJMP __CHKSD2
000db1 2400      	CLR  R0
000db2 95a0      	COM  R26
000db3 95b0      	COM  R27
000db4 9580      	COM  R24
000db5 9590      	COM  R25
000db6 9611      	ADIW R26,1
000db7 1d80      	ADC  R24,R0
000db8 1d90      	ADC  R25,R0
000db9 f800      	BLD  R0,0
000dba 9403      	INC  R0
000dbb fa00      	BST  R0,0
                 __CHKSD2:
000dbc 9508      	RET
                 
                 __GETW1P:
000dbd 91ed      	LD   R30,X+
000dbe 91fc      	LD   R31,X
000dbf 9711      	SBIW R26,1
000dc0 9508      	RET
                 
                 __GETD1P:
000dc1 91ed      	LD   R30,X+
000dc2 91fd      	LD   R31,X+
000dc3 916d      	LD   R22,X+
000dc4 917c      	LD   R23,X
000dc5 9713      	SBIW R26,3
000dc6 9508      	RET
                 
                 __PUTDP1:
000dc7 93ed      	ST   X+,R30
000dc8 93fd      	ST   X+,R31
000dc9 936d      	ST   X+,R22
000dca 937c      	ST   X,R23
000dcb 9508      	RET
                 
                 __GETD1S0:
000dcc 81e8      	LD   R30,Y
000dcd 81f9      	LDD  R31,Y+1
000dce 816a      	LDD  R22,Y+2
000dcf 817b      	LDD  R23,Y+3
000dd0 9508      	RET
                 
                 __GETD2S0:
000dd1 81a8      	LD   R26,Y
000dd2 81b9      	LDD  R27,Y+1
000dd3 818a      	LDD  R24,Y+2
000dd4 819b      	LDD  R25,Y+3
000dd5 9508      	RET
                 
                 __PUTD1S0:
000dd6 83e8      	ST   Y,R30
000dd7 83f9      	STD  Y+1,R31
000dd8 836a      	STD  Y+2,R22
000dd9 837b      	STD  Y+3,R23
000dda 9508      	RET
                 
                 __PUTPARD1:
000ddb 937a      	ST   -Y,R23
000ddc 936a      	ST   -Y,R22
000ddd 93fa      	ST   -Y,R31
000dde 93ea      	ST   -Y,R30
000ddf 9508      	RET
                 
                 __PUTPARD2:
000de0 939a      	ST   -Y,R25
000de1 938a      	ST   -Y,R24
000de2 93ba      	ST   -Y,R27
000de3 93aa      	ST   -Y,R26
000de4 9508      	RET
                 
                 __SWAPD12:
000de5 2e18      	MOV  R1,R24
000de6 2f86      	MOV  R24,R22
000de7 2d61      	MOV  R22,R1
000de8 2e19      	MOV  R1,R25
000de9 2f97      	MOV  R25,R23
000dea 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000deb 2e1b      	MOV  R1,R27
000dec 2fbf      	MOV  R27,R31
000ded 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000dee 2e1a      	MOV  R1,R26
000def 2fae      	MOV  R26,R30
000df0 2de1      	MOV  R30,R1
000df1 9508      	RET
                 
                 __CPD10:
000df2 9730      	SBIW R30,0
000df3 4060      	SBCI R22,0
000df4 4070      	SBCI R23,0
000df5 9508      	RET
                 
                 __SAVELOCR6:
000df6 935a      	ST   -Y,R21
                 __SAVELOCR5:
000df7 934a      	ST   -Y,R20
                 __SAVELOCR4:
000df8 933a      	ST   -Y,R19
                 __SAVELOCR3:
000df9 932a      	ST   -Y,R18
                 __SAVELOCR2:
000dfa 931a      	ST   -Y,R17
000dfb 930a      	ST   -Y,R16
000dfc 9508      	RET
                 
                 __LOADLOCR6:
000dfd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000dfe 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000dff 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000e00 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e01 8119      	LDD  R17,Y+1
000e02 8108      	LD   R16,Y
000e03 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  78 r1 :  40 r2 :   0 r3 :   0 r4 :   2 r5 :   0 r6 :   2 r7 :   2 
r8 :   0 r9 :   1 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  54 r17:  71 r18:  48 r19:  35 r20:  50 r21:  90 r22: 185 r23: 163 
r24: 128 r25:  90 r26: 320 r27: 135 r28:  39 r29:   1 r30: 538 r31: 235 
x  :  44 y  : 428 z  :  25 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  36 add   :  26 
adiw  :  40 and   :   5 andi  :  12 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   1 break :   0 breq  :  50 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  26 
brlt  :   2 brmi  :  11 brne  :  73 brpl  :  11 brsh  :   7 brtc  :   7 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   4 call  : 371 
cbi   :  19 cbr   :   1 clc   :   4 clh   :   0 cli   :   1 cln   :   0 
clr   :  61 cls   :   0 clt   :   7 clv   :   0 clz   :   2 com   :  18 
cp    :  13 cpc   :  28 cpi   :  90 cpse  :   0 dec   :  20 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :   8 inc   :   4 jmp   :  27 ld    :  56 ldd   : 217 ldi   : 364 
lds   :  53 lpm   :  14 lsl   :  16 lsr   :   4 mov   :  95 movw  :  82 
mul   :  21 muls  :   0 mulsu :   0 neg   :   9 nop   :   1 or    :   1 
ori   :  13 out   :  21 pop   :  54 push  :  54 rcall : 101 ret   : 141 
reti  :   0 rjmp  : 160 rol   :  36 ror   :  18 sbc   :  18 sbci  :  32 
sbi   :  20 sbic  :   2 sbis  :   6 sbiw  :  36 sbr   :   4 sbrc  :   5 
sbrs  :  23 sec   :   6 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   6 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 120 std   :  92 sts   :  42 sub   :   8 subi  :  52 swap  :   1 
tst   :  27 wdr   :   1 
Instructions used: 82 out of 116 (70.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001c08   7100     76   7176   32768  21.9%
[.dseg] 0x000060 0x0002a8      0     72     72    2048   3.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
