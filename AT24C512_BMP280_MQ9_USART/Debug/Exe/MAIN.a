;/*******************************************************
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8/000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;
;// I2C Bus functions
;#include <i2c.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#define BMP280_I2C_ADDRESS  0xEC
;#include <BMP280_Lib.c>
;#include <stdint.h>
;
;#ifndef BMP280_I2C_ADDRESS
;  #define BMP280_I2C_ADDRESS  0xEE
;#endif
;
;#define BMP280_CHIP_ID        0x58
;
;#define BMP280_REG_DIG_T1     0x88
;#define BMP280_REG_DIG_T2     0x8A
;#define BMP280_REG_DIG_T3     0x8C
;
;#define BMP280_REG_DIG_P1     0x8E
;#define BMP280_REG_DIG_P2     0x90
;#define BMP280_REG_DIG_P3     0x92
;#define BMP280_REG_DIG_P4     0x94
;#define BMP280_REG_DIG_P5     0x96
;#define BMP280_REG_DIG_P6     0x98
;#define BMP280_REG_DIG_P7     0x9A
;#define BMP280_REG_DIG_P8     0x9C
;#define BMP280_REG_DIG_P9     0x9E
;
;#define BMP280_REG_CHIPID     0xD0
;#define BMP280_REG_SOFTRESET  0xE0
;
;#define BMP280_REG_STATUS     0xF3
;#define BMP280_REG_CONTROL    0xF4
;#define BMP280_REG_CONFIG     0xF5
;#define BMP280_REG_PRESS_MSB  0xF7
;
;int32_t adc_T, adc_P, t_fine;
;
;// BMP280 sensor modes, register ctrl_meas mode[1:0]
;enum BMP280_mode
;{
;  MODE_SLEEP  = 0x00,  // sleep mode
;  MODE_FORCED = 0x01,  // forced mode
;  MODE_NORMAL = 0x03   // normal mode
;} ;
;
;// oversampling setting. osrs_t[2:0], osrs_p[2:0]
;enum BMP280_sampling
;{
;  SAMPLING_SKIPPED = 0x00,  //skipped, output set to 0x80000
;  SAMPLING_X1      = 0x01,  // oversampling x1
;  SAMPLING_X2      = 0x02,  // oversampling x2
;  SAMPLING_X4      = 0x03,  // oversampling x4
;  SAMPLING_X8      = 0x04,  // oversampling x8
;  SAMPLING_X16     = 0x05   // oversampling x16
;} ;
;
;// filter setting filter[2:0]
;enum BMP280_filter
;{
;  FILTER_OFF = 0x00,  // filter off
;  FILTER_2   = 0x01,  // filter coefficient = 2
;  FILTER_4   = 0x02,  // filter coefficient = 4
;  FILTER_8   = 0x03,  // filter coefficient = 8
;  FILTER_16  = 0x04   // filter coefficient = 16
;} ;
;
;// standby (inactive) time in ms (used in normal mode), t_sb[2:0]
;enum standby_time
;{
;  STANDBY_0_5   =  0x00,  // standby time = 0.5 ms
;  STANDBY_62_5  =  0x01,  // standby time = 62.5 ms
;  STANDBY_125   =  0x02,  // standby time = 125 ms
;  STANDBY_250   =  0x03,  // standby time = 250 ms
;  STANDBY_500   =  0x04,  // standby time = 500 ms
;  STANDBY_1000  =  0x05,  // standby time = 1000 ms
;  STANDBY_2000  =  0x06,  // standby time = 2000 ms
;  STANDBY_4000  =  0x07   // standby time = 4000 ms
;} ;
;
;struct
;{
;  uint16_t dig_T1;
;  int16_t  dig_T2;
;  int16_t  dig_T3;
;
;  uint16_t dig_P1;
;  int16_t  dig_P2;
;  int16_t  dig_P3;
;  int16_t  dig_P4;
;  int16_t  dig_P5;
;  int16_t  dig_P6;
;  int16_t  dig_P7;
;  int16_t  dig_P8;
;  int16_t  dig_P9;
;} BMP280_calib;
;
;// writes 1 byte '_data' to register 'reg_addr'
;void BMP280_Write(uint8_t reg_addr, uint8_t _data)
; 0000 0016 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;  i2c_start();
;PCODE: $0000000F VOL: 0
;	reg_addr -> Y+1
;	_data -> Y+0
;PCODE: $00000010 VOL: 0
;  i2c_write(BMP280_I2C_ADDRESS);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;  i2c_write(reg_addr);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;  i2c_write(_data);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;  i2c_stop();
;PCODE: $00000017 VOL: 0
;}
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;// reads 8 bits from register 'reg_addr'
;uint8_t BMP280_Read8(uint8_t reg_addr)
;{
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;  uint8_t ret;
;
;  i2c_start();
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;	reg_addr -> Y+1
;	ret -> R17
;PCODE: $0000001F VOL: 0
;  i2c_write(BMP280_I2C_ADDRESS);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;  i2c_write(reg_addr);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;  i2c_start();
;PCODE: $00000024 VOL: 0
;  i2c_write(BMP280_I2C_ADDRESS | 1);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;  ret = i2c_read(0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;  i2c_stop();
;PCODE: $0000002A VOL: 0
;
;  return ret;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;}
;PCODE: $00000030 VOL: 0
;
;// reads 16 bits from register 'reg_addr'
;uint16_t BMP280_Read16(uint8_t reg_addr)
;{
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;  union
;  {
;    uint8_t  b[2];
;    uint16_t w;
;  } ret;
;
;  i2c_start();
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;	reg_addr -> Y+2
;	ret -> Y+0
;PCODE: $00000035 VOL: 0
;  i2c_write(BMP280_I2C_ADDRESS);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;  i2c_write(reg_addr);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;  i2c_start();
;PCODE: $0000003A VOL: 0
;  i2c_write(BMP280_I2C_ADDRESS | 1);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;  ret.b[0] = i2c_read(1);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;  ret.b[1] = i2c_read(0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;  i2c_stop();
;PCODE: $00000043 VOL: 0
;
;  return(ret.w);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;}
;PCODE: $00000047 VOL: 0
;
;// BMP280 sensor configuration function
;void BMP280_Configure()
;{
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;  uint8_t  _ctrl_meas, _config;
;
;  _config = ((0x00 << 5) | (0x00 << 2)) & 0xFC;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;	_ctrl_meas -> R17
;	_config -> R16
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;  _ctrl_meas = (0x01 << 5) | (0x01 << 2) | 0x03;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;  BMP280_Write(BMP280_REG_CONFIG,  _config);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;  BMP280_Write(BMP280_REG_CONTROL, _ctrl_meas);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;}
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;
;// initializes the BMP280 sensor, returns 1 if OK and 0 if error
;short BMP280_begin()
;{
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;  if(BMP280_Read8(BMP280_REG_CHIPID) != BMP280_CHIP_ID)
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;    return 0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;
;  // reset the BMP280 with soft reset
;  BMP280_Write(BMP280_REG_SOFTRESET, 0xB6);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;  delay_ms(100);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;
;  // if NVM data are being copied to image registers, wait 100 ms
;  while ( (BMP280_Read8(BMP280_REG_STATUS) & 0x01) == 0x01 )
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;    delay_ms(100);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;  BMP280_calib.dig_T2 = BMP280_Read16(BMP280_REG_DIG_T2);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;  BMP280_calib.dig_T3 = BMP280_Read16(BMP280_REG_DIG_T3);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;
;  BMP280_calib.dig_P1 = BMP280_Read16(BMP280_REG_DIG_P1);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;  BMP280_calib.dig_P2 = BMP280_Read16(BMP280_REG_DIG_P2);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;  BMP280_calib.dig_P3 = BMP280_Read16(BMP280_REG_DIG_P3);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;  BMP280_calib.dig_P4 = BMP280_Read16(BMP280_REG_DIG_P4);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;  BMP280_calib.dig_P5 = BMP280_Read16(BMP280_REG_DIG_P5);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;  BMP280_calib.dig_P6 = BMP280_Read16(BMP280_REG_DIG_P6);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;  BMP280_calib.dig_P7 = BMP280_Read16(BMP280_REG_DIG_P7);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;  BMP280_calib.dig_P8 = BMP280_Read16(BMP280_REG_DIG_P8);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;  BMP280_calib.dig_P9 = BMP280_Read16(BMP280_REG_DIG_P9);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;
;  BMP280_Configure();
;PCODE: $000000A5 VOL: 0
;
;  return 1;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;}
;PCODE: $000000A8 VOL: 0
;
;// Takes a new measurement, for forced mode only!
;// Returns 1 if ok and 0 if error (sensor is not in sleep mode)
;short BMP280_ForcedMeasurement()
;{
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;  uint8_t ctrl_meas_reg = BMP280_Read8(BMP280_REG_CONTROL);
;
;  if ( (ctrl_meas_reg & 0x03) != 0x00 )
;PCODE: $000000AB VOL: 0
;	ctrl_meas_reg -> R17
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;    return 0;   // sensor is not in sleep mode
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;
;  // set sensor to forced mode
;  BMP280_Write(BMP280_REG_CONTROL, ctrl_meas_reg | 1);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;  // wait for conversion complete
;  while (BMP280_Read8(BMP280_REG_STATUS) & 0x08)
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;    delay_ms(1);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;}
;PCODE: $000000C9 VOL: 0
;
;// read (updates) adc_P, adc_T and adc_H from BMP280 sensor
;void BMP280_Update()
;{
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;  union
;  {
;    uint8_t  b[4];
;    uint32_t dw;
;  } ret;
;  ret.b[3] = 0x00;
;PCODE: $000000CC VOL: 0
;	ret -> Y+0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;
;  i2c_start();
;PCODE: $000000CF VOL: 0
;  i2c_write(BMP280_I2C_ADDRESS);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;  i2c_write(BMP280_REG_PRESS_MSB);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;  i2c_start();
;PCODE: $000000D4 VOL: 0
;  i2c_write(BMP280_I2C_ADDRESS | 1);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;  ret.b[2] = i2c_read(1);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;  ret.b[1] = i2c_read(1);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;  ret.b[0] = i2c_read(1);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;
;  adc_P = (ret.dw >> 4) & 0xFFFFF;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;
;  ret.b[2] = i2c_read(1);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;  ret.b[1] = i2c_read(1);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;  ret.b[0] = i2c_read(0);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;  i2c_stop();
;PCODE: $000000EE VOL: 0
;
;  adc_T = (ret.dw >> 4) & 0xFFFFF;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;}
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;
;// Reads temperature from BMP280 sensor.
;// Temperature is stored in hundredths C (output value of "5123" equals 51.23 DegC).
;// Temperature value is saved to *temp, returns 1 if OK and 0 if error.
;short BMP280_readTemperature(int32_t *temp)
;{
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;  int32_t var1, var2;
;
;  BMP280_Update();
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;	*temp -> Y+8
;	var1 -> Y+4
;	var2 -> Y+0
;PCODE: $000000FB VOL: 0
;
;  // calculate temperature
;  var1 = ((((adc_T / 8) - ((int32_t)BMP280_calib.dig_T1 * 2))) *
;         ((int32_t)BMP280_calib.dig_T2)) / 2048;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;
;  var2 = (((((adc_T / 16) - ((int32_t)BMP280_calib.dig_T1)) *
;         ((adc_T / 16) - ((int32_t)BMP280_calib.dig_T1))) / 4096) *
;         ((int32_t)BMP280_calib.dig_T3)) / 16384;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;
;  t_fine = var1 + var2;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;
;  *temp = (t_fine * 5 + 128) / 256;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;
;  return 1;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;}
;PCODE: $00000134 VOL: 0
;
;// Reads pressure from BMP280 sensor.
;// Pressure is stored in Pa (output value of "96386" equals 96386 Pa = 963.86 hPa).
;// Pressure value is saved to *pres, returns 1 if OK and 0 if error.
;short BMP280_readPressure(uint32_t *pres)
;{
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;  int32_t var1, var2;
;  uint32_t p;
;
;  // calculate pressure
;  var1 = (((int32_t)t_fine) / 2) - (int32_t)64000;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;	*pres -> Y+12
;	var1 -> Y+8
;	var2 -> Y+4
;	p -> Y+0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;  var2 = (((var1/4) * (var1/4)) / 2048 ) * ((int32_t)BMP280_calib.dig_P6);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;
;  var2 = var2 + ((var1 * ((int32_t)BMP280_calib.dig_P5)) * 2);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;  var2 = (var2/4) + (((int32_t)BMP280_calib.dig_P4) * 65536);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;
;  var1 = ((((int32_t)BMP280_calib.dig_P3 * (((var1/4) * (var1/4)) / 8192 )) / 8) +
;         ((((int32_t)BMP280_calib.dig_P2) * var1)/2)) / 262144;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;
;  var1 =((((32768 + var1)) * ((int32_t)BMP280_calib.dig_P1)) / 32768);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;
;  if (var1 == 0)
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;    return 0; // avoid exception caused by division by zero
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;
;  p = (((uint32_t)(((int32_t)1048576) - adc_P) - (var2 / 4096))) * 3125;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;
;  if (p < 0x80000000)
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;    p = (p * 2) / ((uint32_t)var1);
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;
;  else
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;    p = (p / (uint32_t)var1) * 2;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;
;  var1 = (((int32_t)BMP280_calib.dig_P9) * ((int32_t)(((p/8) * (p/8)) / 8192))) / 4096;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;  var2 = (((int32_t)(p/4)) * ((int32_t)BMP280_calib.dig_P8)) / 8192;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;
;  p = (uint32_t)((int32_t)p + ((var1 + var2 + (int32_t)BMP280_calib.dig_P7) / 16));
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;
;  *pres = p;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;
;  return 1;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;}
;PCODE: $000001E7 VOL: 0
;
;// end of code.
;
;char lcd[16];
;int32_t temperature;
;uint32_t pressure;
;float i;
;int MQ9;
;
;
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0025 {
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0026 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $000001EA VOL: 0
;	adc_input -> Y+0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0027 // Delay needed for the stabilization of the ADC input voltage
; 0000 0028 delay_us(10);
;PCODE: $000001EE VOL: 0
; 0000 0029 // Start the AD conversion
; 0000 002A ADCSRA|=(1<<ADSC);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 002B // Wait for the AD conversion to complete
; 0000 002C while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 002D ADCSRA|=(1<<ADIF);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 002E return ADCW;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 002F }
;PCODE: $000001FC VOL: 0
;
;
;void adc_init(unsigned char prescaler)
; 0000 0033 {
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0034     // ADC initialization
; 0000 0035     // ADC Clock frequency: 1000.000 kHz
; 0000 0036     // ADC Voltage Reference: AREF pin
; 0000 0037     // ADC Auto Trigger Source: ADC Stopped
; 0000 0038 
; 0000 0039     ADMUX = ADC_VREF_TYPE;
;PCODE: $000001FF VOL: 0
;	prescaler -> Y+0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 003A     ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 003B 
; 0000 003C     //default MCU clock frequency is considered 8MHz.
; 0000 003D     //for 1000.000 kHz ADC frequency, prescaler 64 is used with ADPS registers.
; 0000 003E 
; 0000 003F     switch (prescaler)
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0040     {
; 0000 0041         case 2:
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0042             ADCSRA |= (0 << ADPS2) | (0 << ADPS1) | (1 << ADPS0);
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0043             break;
;PCODE: $0000020A VOL: 0
; 0000 0044         case 4:
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0045             ADCSRA |= (0 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0046             break;
;PCODE: $00000210 VOL: 0
; 0000 0047         case 8:
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0048             ADCSRA |= (0 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0049             break;
;PCODE: $00000217 VOL: 0
; 0000 004A         case 16:
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 004B             ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (0 << ADPS0);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 004C             break;
;PCODE: $0000021D VOL: 0
; 0000 004D         case 32:
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 004E             ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (1 << ADPS0);
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 004F             break;
;PCODE: $00000224 VOL: 0
; 0000 0050         case 64:
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0051             ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0052             break;
;PCODE: $0000022B VOL: 0
; 0000 0053         case 128:
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0054             ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0055             break;
;PCODE: $00000232 VOL: 0
; 0000 0056         default:
;PCODE: $00000233 VOL: 0
; 0000 0057             // Default to prescaler 64
; 0000 0058             ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0059             break;
;PCODE: $00000237 VOL: 0
; 0000 005A     }
;PCODE: $00000238 VOL: 0
; 0000 005B 
; 0000 005C     SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 005D }
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;
;
;
;void usart_init()
; 0000 0062 {
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0063  // USART initialization
; 0000 0064 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0065 // USART Receiver: Off
; 0000 0066 // USART Transmitter: On
; 0000 0067 // USART Mode: Asynchronous
; 0000 0068 // USART Baud Rate: 9600
; 0000 0069 UCSRA=0;
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 006A UCSRB= (1<<TXEN) ;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 006B UCSRC=(1<<URSEL)| (1<<UCSZ1) | (1<<UCSZ0);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 006C UBRRH=0x00;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 006D UBRRL=0x33;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 006E }
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;
;
;void main(void)
; 0000 0072 {
;PCODE: $0000024C VOL: 0
; 0000 0073 // Declare your local variables here
; 0000 0074 
; 0000 0075 // Input/Output Ports initialization
; 0000 0076 // Port A initialization
; 0000 0077 DDRA= (0<<DDA0);
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0078 PORTA= (0<<PORTA0);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 0079 
; 0000 007A 
; 0000 007B 
; 0000 007C // Bit-Banged I2C Bus initialization
; 0000 007D // I2C Port: PORTC
; 0000 007E // I2C SDA bit: 1
; 0000 007F // I2C SCL bit: 0
; 0000 0080 // Bit Rate: 100 kHz
; 0000 0081 // Note: I2C settings are specified in the
; 0000 0082 // Project|Configure|C Compiler|Libraries|I2C menu.
; 0000 0083 i2c_init();
;PCODE: $00000251 VOL: 0
; 0000 0084 
; 0000 0085 // Alphanumeric LCD initialization
; 0000 0086 // Connections are specified in the
; 0000 0087 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0088 // RS - PORTB Bit 0
; 0000 0089 // RD - PORTB Bit 1
; 0000 008A // EN - PORTB Bit 2
; 0000 008B // D4 - PORTB Bit 4
; 0000 008C // D5 - PORTB Bit 5
; 0000 008D // D6 - PORTB Bit 6
; 0000 008E // D7 - PORTB Bit 7
; 0000 008F // Characters/line: 16
; 0000 0090 lcd_init(16);
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0091 adc_init(64);
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0092 usart_init();
;PCODE: $00000256 VOL: 0
; 0000 0093 
; 0000 0094 
; 0000 0095 // initialize the BMP280 sensor
; 0000 0096   if(BMP280_begin() == 0)
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0097   {  // connection error or device address wrong!
; 0000 0098     lcd_gotoxy(0, 0);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0099     putsf("Connection error!");
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 009A 
; 0000 009B   }
; 0000 009C 
; 0000 009D 
; 0000 009E while (1)
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 009F       {
; 0000 00A0     // Read temperature (in hundredths C) and pressure (in Pa)
; 0000 00A1     // values from BMP280 sensor
; 0000 00A2     BMP280_readTemperature(&temperature);  // read temperature
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 00A3     BMP280_readPressure(&pressure);        // read pressure
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 00A4 
; 0000 00A5     i=read_adc(0);
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 00A6     MQ9=(i*100)/1023 ;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 00A7 
; 0000 00A8     // print data on the LCD screen
; 0000 00A9     // 1: print temperature
; 0000 00AA     // 2: print pressure
; 0000 00AB     lcd_gotoxy(0, 0);
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 00AC     if(temperature < 0)
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 00AD     {
; 0000 00AE       putchar('-');
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 00AF       temperature = abs(temperature);
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 00B0     }
; 0000 00B1     else
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 00B2 
; 0000 00B3    sprintf(lcd, "%02u.%02u,%04u.%02u,%d", temperature / 100, temperature % 100, pressure / 100, pressure % 100, MQ9);
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 00B4 
; 0000 00B5 
; 0000 00B6 
; 0000 00B7 		puts(lcd);
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 00B8         delay_ms(2000);  // wait 2 seconds
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 00B9 
; 0000 00BA 
; 0000 00BB 
; 0000 00BC 
; 0000 00BD 
; 0000 00BE 
; 0000 00BF       }
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 00C0 }
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
