;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Reciever[recieves data from USART transmitter, saves it in AT24C512 and display its content on lcd2x16]
;Version :
;Date    : 8/28/2023
;Author  : Parham Soltani
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <twi.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Define constants for EEPROM size and chunk size
;#define EEPROM_SIZE 524288 // 512 KB
;#define CHUNK_SIZE 17
;
;// Declare your global variables here
;unsigned char ch;
;unsigned int j=0;
;unsigned int currentWriteAddress = 0;
;
;unsigned char receivedData[20]; // Buffer to store received data
;volatile unsigned int dataIndex = 0; // Index for the buffer
;volatile unsigned char dataReady = 0;
;unsigned char bufferSize=17;
;
;unsigned char at24c512_buff[130];
;
;unsigned char read_buff[20];
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;void at24c512_write(unsigned char device_addr, unsigned int data_addr, unsigned char *buffer, unsigned char count);
;void at24c512_read(unsigned char device_addr, unsigned int data_addr, unsigned char *buffer, unsigned char count);
;void at24c512_read_last_chunks(unsigned char *buffer, unsigned char count);
;
;
;void usart_init()
; 0000 003B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003C     // USART initialization
; 0000 003D     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 003E     // USART Receiver: On
; 0000 003F     // USART Transmitter: Off
; 0000 0040     // USART Mode: Asynchronous
; 0000 0041     // USART Baud Rate: 9600
; 0000 0042     UCSRA=0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0043     UCSRB=(1<<RXCIE) | (1<<RXEN);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0044     UCSRC=(1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0045     UBRRH=0x00;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0046     UBRRL=0x33;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0047     #asm("sei")
;PCODE: $00000019 VOL: 0
	sei
;PCODE: $0000001A VOL: 0
; 0000 0048 
; 0000 0049 }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 004D {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 004E     ch = UDR; // Read the received character
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004F 
; 0000 0050     if (ch == '\n') // Check for end of data
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0051     {
; 0000 0052         //receivedData[dataIndex] = '\0'; // Null-terminate the string
; 0000 0053         dataReady = 1; // Set the data ready flag
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 1
; 0000 0054         dataIndex = 0; // Reset the index for the next data
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 1
; 0000 0055     }
; 0000 0056     else
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0057     {
; 0000 0058         if (dataIndex < sizeof(receivedData) - 1) // Check for buffer overflow
;PCODE: $0000002A VOL: 1
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0059         {
; 0000 005A             receivedData[dataIndex++] = ch; // Store the character in the buffer
;PCODE: $0000002D VOL: 1
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 005B         }
; 0000 005C     }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 005D }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;
;void main(void)
; 0000 0061 {
;PCODE: $00000039 VOL: 0
; 0000 0062 // Declare your local variables here
; 0000 0063 
; 0000 0064 unsigned char lastChunks[2 * CHUNK_SIZE];
; 0000 0065 
; 0000 0066 usart_init();
;PCODE: $0000003A VOL: 0
;	lastChunks -> Y+0
;PCODE: $0000003B VOL: 0
; 0000 0067 
; 0000 0068 // Alphanumeric LCD initialization
; 0000 0069 // Connections are specified in the
; 0000 006A // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 006B // RS - PORTB Bit 0
; 0000 006C // RD - PORTB Bit 1
; 0000 006D // EN - PORTB Bit 2
; 0000 006E // D4 - PORTB Bit 4
; 0000 006F // D5 - PORTB Bit 5
; 0000 0070 // D6 - PORTB Bit 6
; 0000 0071 // D7 - PORTB Bit 7
; 0000 0072 // Characters/line: 16
; 0000 0073 lcd_init(16);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0074 
; 0000 0075 twi_master_init(100); //I2C clock is set to 100kHz
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0076 
; 0000 0077     while (1)
;PCODE: $00000041 VOL: 0
; 0000 0078     {
; 0000 0079         if (dataReady)
;PCODE: $00000042 VOL: 1
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 007A         {
; 0000 007B 
; 0000 007C             unsigned int writeAddress = currentWriteAddress;
; 0000 007D             at24c512_write(0x00, writeAddress, receivedData, bufferSize);
;PCODE: $00000045 VOL: 0
;	lastChunks -> Y+2
;	writeAddress -> Y+0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 007E             currentWriteAddress = (currentWriteAddress + CHUNK_SIZE) % EEPROM_SIZE;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 007F             delay_ms(100);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0080 
; 0000 0081 
; 0000 0082             at24c512_read_last_chunks(lastChunks, 2 * CHUNK_SIZE);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0083             //at24c512_read(0x00, writeAddress, read_buff, bufferSize);
; 0000 0084 
; 0000 0085             // Clear the buffer
; 0000 0086             for (j = 0; j < sizeof(receivedData); j++)
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0087             {
; 0000 0088                 receivedData[j] = '\0';
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0089             }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 008A 
; 0000 008B             lcd_gotoxy(0, 0);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 008C             lcd_putsf("Last 2 chunks of recieved data:");
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 008D             delay_ms(1000);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 008E             lcd_clear();
;PCODE: $00000077 VOL: 0
; 0000 008F             lcd_gotoxy(0, 0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0090             lcd_puts(lastChunks); // Display the received data
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0091 
; 0000 0092             dataReady = 0; // Reset the data ready flag
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 1
; 0000 0093 
; 0000 0094             delay_ms(2000);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0095             lcd_clear();
;PCODE: $00000082 VOL: 0
; 0000 0096         }
;PCODE: $00000083 VOL: 0
; 0000 0097     }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0098 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;void at24c512_write(unsigned char device_addr,
; 0000 009B                     unsigned int data_addr,
; 0000 009C                     unsigned char *buffer,
; 0000 009D                     unsigned char count)
; 0000 009E {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 009F     unsigned char i;
; 0000 00A0     device_addr += 0x50;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;	device_addr -> Y+6
;	data_addr -> Y+4
;	*buffer -> Y+2
;	count -> Y+1
;	i -> R17
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A1     at24c512_buff[0] = (data_addr&0xFF00)>>8;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A2     at24c512_buff[1] = (data_addr&0x00FF);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A3 
; 0000 00A4     for(i=0;i<count;i++) at24c512_buff[i+2] = buffer[i];
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00A5 twi_master_trans(device_addr, at24c512_buff, count+2, 0, 0);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00A6 }
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;
;void at24c512_read(unsigned char device_addr,
; 0000 00A9                     unsigned int data_addr,
; 0000 00AA                     unsigned char *buffer,
; 0000 00AB                     unsigned char count)
; 0000 00AC {
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00AD     device_addr += 0x50;
;PCODE: $000000C4 VOL: 0
;	device_addr -> Y+5
;	data_addr -> Y+3
;	*buffer -> Y+1
;	count -> Y+0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00AE     at24c512_buff[0] = (data_addr&0xFF00)>>8;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00AF     at24c512_buff[1] = (data_addr&0x00FF);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00B0 
; 0000 00B1     twi_master_trans(device_addr, at24c512_buff, 2, buffer, count);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00B2 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;
;
;void at24c512_read_last_chunks(unsigned char *buffer, unsigned char count)
; 0000 00B6 {
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00B7     // Calculate the read address for the last chunk of data
; 0000 00B8     unsigned int readAddress = (currentWriteAddress - CHUNK_SIZE) % EEPROM_SIZE;
; 0000 00B9 
; 0000 00BA     // Read the last chunk of data from the EEPROM
; 0000 00BB     at24c512_read(0x00, readAddress, buffer, count);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;	*buffer -> Y+3
;	count -> Y+2
;	readAddress -> R16,R17
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00BC }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
