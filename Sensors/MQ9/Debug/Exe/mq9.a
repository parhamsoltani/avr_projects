;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : MQ9 gas sensor
;Version :
;Date    : 8/19/2023
;Author  : Parham Soltani
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <stdio.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;float i;
;int MQ9;
;unsigned char Buffer_lcd[16];
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 002B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002C ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002D // Delay needed for the stabilization of the ADC input voltage
; 0000 002E delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 002F // Start the AD conversion
; 0000 0030 ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0031 // Wait for the AD conversion to complete
; 0000 0032 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0033 ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0034 return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0035 }
;PCODE: $00000021 VOL: 0
;
;
;void adc_init(unsigned char prescaler)
; 0000 0039 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003A     // ADC initialization
; 0000 003B     // ADC Clock frequency: 1000.000 kHz
; 0000 003C     // ADC Voltage Reference: AREF pin
; 0000 003D     // ADC Auto Trigger Source: ADC Stopped
; 0000 003E 
; 0000 003F     ADMUX = ADC_VREF_TYPE;
;PCODE: $00000024 VOL: 0
;	prescaler -> Y+0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0040     ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0041 
; 0000 0042     //default MCU clock frequency is considered 8MHz.
; 0000 0043     //for 1000.000 kHz ADC frequency, prescaler 64 is used with ADPS registers.
; 0000 0044 
; 0000 0045     switch (prescaler)
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0046     {
; 0000 0047         case 2:
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0048             ADCSRA |= (0 << ADPS2) | (0 << ADPS1) | (1 << ADPS0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0049             break;
;PCODE: $0000002F VOL: 0
; 0000 004A         case 4:
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 004B             ADCSRA |= (0 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 004C             break;
;PCODE: $00000035 VOL: 0
; 0000 004D         case 8:
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004E             ADCSRA |= (0 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004F             break;
;PCODE: $0000003C VOL: 0
; 0000 0050         case 16:
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0051             ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (0 << ADPS0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0052             break;
;PCODE: $00000042 VOL: 0
; 0000 0053         case 32:
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0054             ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (1 << ADPS0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0055             break;
;PCODE: $00000049 VOL: 0
; 0000 0056         case 64:
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0057             ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0058             break;
;PCODE: $00000050 VOL: 0
; 0000 0059         case 128:
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 005A             ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 005B             break;
;PCODE: $00000057 VOL: 0
; 0000 005C         default:
;PCODE: $00000058 VOL: 0
; 0000 005D             // Default to prescaler 64
; 0000 005E             ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 005F             break;
;PCODE: $0000005C VOL: 0
; 0000 0060     }
;PCODE: $0000005D VOL: 0
; 0000 0061 
; 0000 0062     SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0063 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;
;void mq9_init(void)
; 0000 0066 {
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0067 i=read_adc(0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0068 MQ9=(i*100)/1023 ;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0069 sprintf(Buffer_lcd,"Gas amount: %d",MQ9);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 006A lcd_gotoxy(0,0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 006B lcd_puts(Buffer_lcd);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006C lcd_putsf("%");
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 006D delay_ms(500);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 006E lcd_clear();
;PCODE: $00000089 VOL: 0
; 0000 006F }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;
;
;
;void main(void)
; 0000 0074 {
;PCODE: $0000008C VOL: 0
; 0000 0075 // Declare your local variables here
; 0000 0076 
; 0000 0077 
; 0000 0078 // Input/Output Ports initialization
; 0000 0079 // Port A initialization
; 0000 007A DDRA= (0<<DDA0);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 007B PORTA= (0<<PORTA0);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 007C 
; 0000 007D 
; 0000 007E // Alphanumeric LCD initialization
; 0000 007F // Connections are specified in the
; 0000 0080 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0081 // RS - PORTC Bit 0
; 0000 0082 // RD - PORTC Bit 1
; 0000 0083 // EN - PORTC Bit 2
; 0000 0084 // D4 - PORTC Bit 4
; 0000 0085 // D5 - PORTC Bit 5
; 0000 0086 // D6 - PORTC Bit 6
; 0000 0087 // D7 - PORTC Bit 7
; 0000 0088 // Characters/line: 8
; 0000 0089 lcd_init(16);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 008A adc_init(64);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 008B 
; 0000 008C while (1)
;PCODE: $00000095 VOL: 0
; 0000 008D       {
; 0000 008E       // Place your code here
; 0000 008F       mq9_init();
;PCODE: $00000096 VOL: 0
; 0000 0090 
; 0000 0091       }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0092 }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
