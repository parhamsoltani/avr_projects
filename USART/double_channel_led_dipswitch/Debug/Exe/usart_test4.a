;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/16/2023
;Author  : Parham Soltani
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define F_CPU 8000000UL			/* Define frequency here its 8MHz */
;
;#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)
;
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0024 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0025     PORTA=UDR;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0026 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;void usart_init(long USART_BAUDRATE)
; 0000 0029 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002A // USART initialization
; 0000 002B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 002C // USART Receiver: On
; 0000 002D // USART Transmitter: On
; 0000 002E // USART Mode: Asynchronous
; 0000 002F // USART Baud Rate: 9600
; 0000 0030 
; 0000 0031 UCSRB=(1<<RXCIE) | (1<<RXEN) | (1<<TXEN);
;PCODE: $00000016 VOL: 0
;	USART_BAUDRATE -> Y+0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0032 UCSRC=(1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0033 
; 0000 0034 UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate */
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0035 UBRRH = (BAUD_PRESCALE >> 8);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0036 
; 0000 0037 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;void main(void)
; 0000 003A {
;PCODE: $0000002F VOL: 0
; 0000 003B // Declare your local variables here
; 0000 003C 
; 0000 003D // Input/Output Ports initialization
; 0000 003E // Port A initialization
; 0000 003F DDRA=(1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0040 PORTA=(0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0041 
; 0000 0042 // Port B initialization
; 0000 0043 DDRB=(0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0044 PORTB=(1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0045 
; 0000 0046 
; 0000 0047 
; 0000 0048 usart_init(51);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0049 #asm("sei");
;PCODE: $0000003A VOL: 0
	sei
;PCODE: $0000003B VOL: 0
; 0000 004A 
; 0000 004B while (1)
;PCODE: $0000003C VOL: 0
; 0000 004C       {
; 0000 004D       // Place your code here
; 0000 004E       UDR=PINB;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004F       while(!(UCSRA & (1<<UDRE)));
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0050 
; 0000 0051       }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0052 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
