;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/22/2023
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;unsigned char str[20];
;unsigned char ch;
;unsigned int i = 0, j=0;
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void usart_init()
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028 
; 0000 0029     // USART initialization
; 0000 002A     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 002B     // USART Receiver: On
; 0000 002C     // USART Transmitter: Off
; 0000 002D     // USART Mode: Asynchronous
; 0000 002E     // USART Baud Rate: 9600
; 0000 002F     UCSRA=0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0030     UCSRB=(1<<RXCIE) | (1<<RXEN);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0031     UCSRC=(1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0032     UBRRH=0x00;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0033     UBRRL=0x33;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0034 
; 0000 0035 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;void main(void)
; 0000 0038 {
;PCODE: $0000001B VOL: 0
; 0000 0039 // Declare your local variables here
; 0000 003A 
; 0000 003B 
; 0000 003C // Alphanumeric LCD initialization
; 0000 003D // Connections are specified in the
; 0000 003E // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 003F // RS - PORTC Bit 0
; 0000 0040 // RD - PORTC Bit 1
; 0000 0041 // EN - PORTC Bit 2
; 0000 0042 // D4 - PORTC Bit 4
; 0000 0043 // D5 - PORTC Bit 5
; 0000 0044 // D6 - PORTC Bit 6
; 0000 0045 // D7 - PORTC Bit 7
; 0000 0046 // Characters/line: 16
; 0000 0047 lcd_init(16);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0048 usart_init();
;PCODE: $0000001E VOL: 0
; 0000 0049 
; 0000 004A 
; 0000 004B while (1)
;PCODE: $0000001F VOL: 0
; 0000 004C {
; 0000 004D     lcd_gotoxy(0, 0);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 004E     lcd_putsf("Echo test:\t");
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 004F 
; 0000 0050     i = 0; // Reset index for the string
;PCODE: $00000027 VOL: 0
; 0000 0051     while (1)
;PCODE: $00000028 VOL: 0
; 0000 0052     {
; 0000 0053         while(!(UCSRA & (1<<RXC)));
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0054         ch = UDR;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0055 
; 0000 0056         if (ch == ']')
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0057         {
; 0000 0058             str[i++] = ch;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0059             break; // Exit the loop when closing bracket is received
;PCODE: $0000003A VOL: 0
; 0000 005A         }
; 0000 005B 
; 0000 005C         str[i++] = ch;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 005D     }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 005E 
; 0000 005F     // Display and clear the received string
; 0000 0060     lcd_gotoxy(0, 1);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0061     lcd_puts(str);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0062     delay_ms(5000);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0063     lcd_clear();
;PCODE: $0000004C VOL: 0
; 0000 0064 
; 0000 0065     // Clear the string array for next input
; 0000 0066     for (j = 0; j < sizeof(str); j++)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0067     {
; 0000 0068         str[j] = '\0';
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0069     }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 006A }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 006B 
; 0000 006C }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;
