;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Somewhat Echo Test
;Version :
;Date    : 8/20/2023
;Author  : Parham Soltani
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega32a.h>
;#include <delay.h>
;
;// Declare your global variables here
;
;char str[20];
;unsigned char data;
;unsigned int i = 0;
;
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <inttypes.h>
;
;
;void usart_init()
; 0000 0029 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A     UCSRA = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002B 	UCSRB |=  (1 << RXEN) |(1 << TXEN);/* Turn on the transmission and reception */
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002C 	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);/* Use 8-bit character sizes */
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002D 
; 0000 002E 	UBRRL = 0x33;		/* Load lower 8-bits of the baud rate */
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002F 	UBRRH = 0x00;	/* Load upper 8-bits */
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0030 }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;unsigned char usart_read_char()
; 0000 0033 {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0034    //Wait untill a data is available
; 0000 0035    while(!(UCSRA & (1<<RXC)));
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0036 
; 0000 0037    //Now USART has got data from host
; 0000 0038    //and is available is buffer
; 0000 0039    return UDR;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003A }
;PCODE: $00000027 VOL: 0
;
;
;void usart_write_char(char data)
; 0000 003E {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003F 
; 0000 0040 
; 0000 0041     if (data >= 'a' && data <+ 'z')
;PCODE: $0000002A VOL: 0
;	data -> Y+0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0042     {
; 0000 0043         data += ('A' - 'a');
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0044     }
; 0000 0045 
; 0000 0046     //Wait untill the transmitter is ready
; 0000 0047     while (!(UCSRA & (1<< UDRE)));
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0048     UDR='[';
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0049     while (!(UCSRA & (1<< UDRE)));
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004A     UDR = data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004B     while (!(UCSRA & (1<< UDRE)));
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 004C     UDR = ']';
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 004D }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;
;void usart_write_string(char *str)
; 0000 0050 {
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0051 	unsigned char j=0;
; 0000 0052 
; 0000 0053 	while (str[j]!=0)		/* Send string till null */
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;	*str -> Y+1
;	j -> R17
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0054 	{
; 0000 0055         while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0056 	    UDR = str[j] ;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0057 		j++;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0058 	}
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0059 }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;
;void usart_write_string_modified(char *str)
; 0000 005C {
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 005D     unsigned char j=0;
; 0000 005E 	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;	*str -> Y+1
;	j -> R17
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 005F     UDR='[';
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0060 	while (str[j]!=0)		/* Send string till null */
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0061 	{
; 0000 0062         if (str[j] >= 'a' && str[j] <+ 'z')
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0063         {
; 0000 0064             str[j] += ('A' - 'a');
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0065         }
; 0000 0066 
; 0000 0067         while (! (UCSRA & (1<<UDRE)));
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0068 	    UDR= str[j];
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0069 		j++;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 006A 	}
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 006B     while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 006C     UDR=']';
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 006D 
; 0000 006E }
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;
;void main(void)
; 0000 0071 {
;PCODE: $000000B6 VOL: 0
; 0000 0072 // Declare your local variables here
; 0000 0073 
; 0000 0074 usart_init();
;PCODE: $000000B7 VOL: 0
; 0000 0075 
; 0000 0076 usart_write_string("\nSomewhat Echo Test: "); //you can also use putsf method
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0077 
; 0000 0078 while (1)
;PCODE: $000000BB VOL: 0
; 0000 0079 {
; 0000 007A 
; 0000 007B     // for string input you must enter the '*' character in terminal for the start of the string.
; 0000 007C     //then use '#' for the end of it.
; 0000 007D     data = usart_read_char();
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 007E     if(data == '*')
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 007F     {
; 0000 0080       while(data != '#')
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0081       {
; 0000 0082          data = getchar();
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0083          str[i++] = data;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0084       }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0085       str[--i] = NULL;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0086       usart_write_string_modified(str);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0087       delay_ms(400);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0088       i = 0;
;PCODE: $000000D9 VOL: 0
; 0000 0089 
; 0000 008A     }
; 0000 008B     else
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 008C     {
; 0000 008D        usart_write_char(data);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 008E     }
;PCODE: $000000DE VOL: 0
; 0000 008F 
; 0000 0090 
; 0000 0091 
; 0000 0092 
; 0000 0093 }
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0094 
; 0000 0095 
; 0000 0096 }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0

	.DSEG
_0x27:
	.BYTE 0x16
