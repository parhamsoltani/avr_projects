;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Voltmeter with ADC
;Version :
;Date    : 9/9/2023
;Author  : Parham Soltani
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <stdio.h>
;
;// Declare your global variables here
;unsigned char LCD_Buffer[20];
;unsigned int adc, last_adc = 0;
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;#define ADC_RESULOTION 1024
;#define ADC_VREF 5.0
;
;// function prototypes
;void adc_init(void);
;unsigned int read_adc(void);
;
;
;void main(void)
; 0000 002E {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 002F // Declare your local variables here
; 0000 0030 float input_voltage;
; 0000 0031 
; 0000 0032 // Alphanumeric LCD initialization
; 0000 0033 // Connections are specified in the
; 0000 0034 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0035 // RS - PORTD Bit 0
; 0000 0036 // RD - PORTD Bit 1
; 0000 0037 // EN - PORTD Bit 2
; 0000 0038 // D4 - PORTD Bit 4
; 0000 0039 // D5 - PORTD Bit 5
; 0000 003A // D6 - PORTD Bit 6
; 0000 003B // D7 - PORTD Bit 7
; 0000 003C // Characters/line: 16
; 0000 003D adc_init();
;PCODE: $0000000E VOL: 0
;	input_voltage -> Y+0
;PCODE: $0000000F VOL: 0
; 0000 003E lcd_init(16);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 003F lcd_clear();
;PCODE: $00000012 VOL: 0
; 0000 0040 
; 0000 0041     while (1)
;PCODE: $00000013 VOL: 0
; 0000 0042     {
; 0000 0043         adc = read_adc();
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0044         if (adc != last_adc)
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0045         {
; 0000 0046             lcd_clear();
;PCODE: $00000019 VOL: 0
; 0000 0047             input_voltage = (float)adc * (ADC_VREF / ADC_RESULOTION);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0048             sprintf(LCD_Buffer, "ADC = %2u", adc);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0049             lcd_gotoxy(0,0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 004A             lcd_puts(LCD_Buffer);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004B             sprintf(LCD_Buffer, "INPUT_V = %.2fV", input_voltage);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004C             lcd_gotoxy(0,1);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004D             lcd_puts(LCD_Buffer);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004E             last_adc = adc;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004F         }
; 0000 0050     }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0051 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;
;// ADC initialization
;void adc_init(void)
; 0000 0055 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0056 // ADC Clock frequency: 1000.000 kHz
; 0000 0057 // ADC Voltage Reference: AVCC pin
; 0000 0058 // ADC Auto Trigger Source: ADC Stopped
; 0000 0059 ADMUX=ADC_VREF_TYPE;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005A // adc prescaler is set to 64
; 0000 005B ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005C }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;
;// Read the AD conversion result
;unsigned int read_adc(void)
; 0000 0060 {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0061 unsigned int adc_result;
; 0000 0062 unsigned char sreg_status=0;
; 0000 0063 
; 0000 0064 ADMUX = ADC_VREF_TYPE;
;PCODE: $00000055 VOL: 0
;	adc_result -> R16,R17
;	sreg_status -> R19
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0065 
; 0000 0066 // Delay needed for the stabilization of the ADC input voltage
; 0000 0067 delay_us(10);
;PCODE: $0000005A VOL: 0
; 0000 0068 // Start the AD conversion
; 0000 0069 ADCSRA|=(1<<ADSC);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 006A // Wait for the AD conversion to complete
; 0000 006B while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 006C ADCSRA|=(1<<ADIF);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 006D 
; 0000 006E sreg_status = SREG;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 006F #asm("CLI")
;PCODE: $00000067 VOL: 0
	CLI
;PCODE: $00000068 VOL: 0
; 0000 0070 adc_result = ADCW;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0071 SREG = sreg_status;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0072 return adc_result;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0073 }
;PCODE: $00000071 VOL: 0
